<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/spec/system/client_sessions_spec.rb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/spec/system/client_sessions_spec.rb" />
              <option name="originalContent" value="require 'rails_helper'&#10;&#10;RSpec.describe &quot;Client Sessions&quot;, type: :system do&#10;  let!(:client) { FactoryBot.create(:client) }&#10;  let!(:payee) { FactoryBot.create(:payee) }&#10;&#10;  describe &quot;Index page&quot; do&#10;    let!(:client_session1) { FactoryBot.create(:client_session, client: client, session_date: 1.week.ago, duration: 60, description: &quot;First session&quot;) }&#10;    let!(:client_session2) { FactoryBot.create(:client_session, client: client, session_date: 2.days.ago, duration: 90, description: &quot;Second session&quot;) }&#10;&#10;    it &quot;displays all client sessions ordered by date&quot; do&#10;      visit client_sessions_path&#10;&#10;      expect(page).to have_content(&quot;Client Sessions&quot;)&#10;      expect(page).to have_content(client.name)&#10;      expect(page).to have_content(&quot;First session&quot;)&#10;      expect(page).to have_content(&quot;Second session&quot;)&#10;      expect(page).to have_content(&quot;60 minutes&quot;)&#10;      expect(page).to have_content(&quot;90 minutes&quot;)&#10;&#10;      # Check that sessions are ordered by session_date ascending&#10;      session_rows = page.all(&quot;tbody tr&quot;)&#10;      expect(session_rows.first).to have_content(&quot;First session&quot;)&#10;      expect(session_rows.last).to have_content(&quot;Second session&quot;)&#10;    end&#10;&#10;    it &quot;shows invoice status for each session&quot; do&#10;      invoice = FactoryBot.create(:invoice, client: client, status: 'created')&#10;      client_session1.update!(invoice: invoice)&#10;&#10;      visit client_sessions_path&#10;&#10;      within(&quot;##{dom_id(client_session1)}&quot;) do&#10;        expect(page).to have_content(&quot;Created&quot;)&#10;      end&#10;&#10;      within(&quot;##{dom_id(client_session2)}&quot;) do&#10;        expect(page).to have_content(&quot;Unbilled&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;provides action buttons for each session&quot; do&#10;      visit client_sessions_path&#10;&#10;      within(&quot;##{dom_id(client_session1)}&quot;) do&#10;        expect(page).to have_link(&quot;View&quot;)&#10;        expect(page).to have_link(&quot;Edit&quot;)&#10;        expect(page).to have_button(&quot;Delete&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;has a link to create a new client session&quot; do&#10;      visit client_sessions_path&#10;&#10;      expect(page).to have_link(&quot;New Client Session&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Creating a new client session&quot; do&#10;    it &quot;allows creating a client session with valid information&quot; do&#10;      visit new_client_session_path&#10;&#10;      select client.name, from: &quot;Client&quot;&#10;      fill_in &quot;Session Date&quot;, with: Date.current.strftime(&quot;%d/%m/%Y&quot;)&#10;      fill_in &quot;Duration&quot;, with: &quot;90&quot;&#10;      fill_in &quot;Description&quot;, with: &quot;Test session description&quot;&#10;&#10;      click_button &quot;Create Client session&quot;&#10;&#10;      expect(page).to have_content(&quot;Client session was successfully created&quot;)&#10;&#10;      created_session = ClientSession.last&#10;      expect(created_session.client).to eq(client)&#10;      expect(created_session.duration).to eq(90)&#10;      expect(created_session.description).to eq(&quot;Test session description&quot;)&#10;      expect(created_session.session_date).to eq(Date.current)&#10;    end&#10;&#10;    it &quot;shows validation errors when submitting invalid information&quot;, js: true do&#10;      visit new_client_session_path&#10;&#10;      # Submit without filling any fields&#10;      click_button &quot;Create Client session&quot;&#10;&#10;      # Expect to see validation errors&#10;      expect(page).to have_content(&quot;prohibited this record from being saved&quot;)&#10;      expect(page).to have_content(&quot;Client can't be blank&quot;)&#10;      expect(page).to have_content(&quot;Session Date can't be blank&quot;)&#10;    end&#10;&#10;    it &quot;shows validation errors when duration is not a positive number&quot;, js: true do&#10;      visit new_client_session_path&#10;&#10;      select client.name, from: &quot;Client&quot;&#10;      fill_in &quot;Session Date&quot;, with: Date.current.strftime(&quot;%d/%m/%Y&quot;)&#10;      fill_in &quot;Duration&quot;, with: &quot;-30&quot;&#10;&#10;      click_button &quot;Create Client session&quot;&#10;&#10;      expect(page).to have_content(&quot;Duration (minutes) is too low&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Viewing a client session&quot; do&#10;    let!(:client_session) { FactoryBot.create(:client_session, client: client, duration: 75, description: &quot;Detailed session notes&quot;) }&#10;&#10;    it &quot;displays all session details&quot; do&#10;      visit client_session_path(client_session)&#10;&#10;      expect(page).to have_content(client.name)&#10;      expect(page).to have_content(&quot;75 minutes&quot;)&#10;      expect(page).to have_content(&quot;Detailed session notes&quot;)&#10;      expect(page).to have_content(client_session.session_date.strftime(&quot;%d %B %Y&quot;))&#10;    end&#10;&#10;    it &quot;provides action buttons&quot; do&#10;      visit client_session_path(client_session)&#10;&#10;      expect(page).to have_link(&quot;Edit&quot;)&#10;      expect(page).to have_button(&quot;Delete&quot;)&#10;      expect(page).to have_link(&quot;Back&quot;, href: client_sessions_path)&#10;    end&#10;  end&#10;&#10;  describe &quot;Editing a client session&quot; do&#10;    let!(:client_session) { FactoryBot.create(:client_session, client: client, duration: 60, description: &quot;Original description&quot;) }&#10;&#10;    it &quot;allows updating session information&quot; do&#10;      visit edit_client_session_path(client_session)&#10;&#10;      fill_in &quot;Duration&quot;, with: &quot;120&quot;&#10;      fill_in &quot;Description&quot;, with: &quot;Updated session description&quot;&#10;&#10;      click_button &quot;Update Client session&quot;&#10;&#10;      expect(page).to have_content(&quot;Client session was successfully updated&quot;)&#10;&#10;      client_session.reload&#10;      expect(client_session.duration).to eq(120)&#10;      expect(client_session.description).to eq(&quot;Updated session description&quot;)&#10;    end&#10;&#10;    it &quot;shows validation errors when updating with invalid information&quot;, js: true do&#10;      visit edit_client_session_path(client_session)&#10;&#10;      fill_in &quot;Duration&quot;, with: &quot;&quot;&#10;&#10;      click_button &quot;Update Client session&quot;&#10;&#10;      expect(page).to have_content(&quot;prohibited this record from being saved&quot;)&#10;      expect(page).to have_content(&quot;Duration (minutes) can't be blank&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Deleting a client session&quot;, js: true do&#10;    let!(:client_session) { FactoryBot.create(:client_session, client: client) }&#10;&#10;    shared_examples &quot;delete client session&quot; do&#10;      it &quot;allows deletion with confirmation dialog&quot; do&#10;        # Wait for the delete confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog[open]&quot;)&#10;        expect(page).to have_content(&quot;Are you sure you want to delete&quot;)&#10;        expect(page).to have_content(client_session.summary)&#10;&#10;        within(&quot;dialog&quot;) do&#10;          click_button &quot;Delete&quot;&#10;        end&#10;&#10;        expect(page).to have_content(&quot;Client session was successfully destroyed&quot;)&#10;        expect(ClientSession.exists?(client_session.id)).to be_falsey&#10;      end&#10;&#10;      it &quot;allows canceling the delete action&quot; do&#10;        within(&quot;dialog&quot;) do&#10;          click_button &quot;Cancel&quot;&#10;        end&#10;&#10;        # Dialog should close and session should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;        expect(ClientSession.exists?(client_session.id)).to be_truthy&#10;      end&#10;&#10;      it &quot;allows canceling by clicking outside the dialog&quot; do&#10;        # Wait for the delete confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog[open]&quot;)&#10;&#10;        # Click outside the dialog (on the dialog backdrop)&#10;        page.execute_script(&quot;document.querySelector('dialog[open]').click()&quot;)&#10;&#10;        # Dialog should close and session should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;        expect(ClientSession.exists?(client_session.id)).to be_truthy&#10;      end&#10;&#10;      it &quot;redirects to index page after successful deletion&quot; do&#10;        within(&quot;dialog&quot;) do&#10;          click_button &quot;Delete&quot;&#10;        end&#10;&#10;        # Wait for the redirect to complete&#10;        expect(page).to have_content(&quot;Client session was successfully destroyed&quot;)&#10;        expect(current_path).to eq(client_sessions_path)&#10;      end&#10;&#10;&#10;    end&#10;&#10;    context &quot;when session is not invoiced&quot; do&#10;      context &quot;when deleting from index page&quot; do&#10;        before do&#10;          visit client_sessions_path&#10;&#10;          within(&quot;tr##{dom_id(client_session)}&quot;) do&#10;            click_button &quot;Delete&quot;&#10;          end&#10;        end&#10;&#10;        include_examples &quot;delete client session&quot;&#10;      end&#10;&#10;      context &quot;when deleting from show page&quot; do&#10;        before do&#10;          visit client_session_path(client_session)&#10;          click_button &quot;Delete&quot;&#10;        end&#10;&#10;        include_examples &quot;delete client session&quot;&#10;      end&#10;    end&#10;&#10;    context &quot;when session is invoiced&quot; do&#10;      let!(:invoice) { FactoryBot.create(:invoice, client: client, status: 'sent') }&#10;&#10;      before do&#10;        client_session.update!(invoice: invoice)&#10;      end&#10;&#10;      it &quot;does not show delete button on index page when session is invoiced and sent&quot; do&#10;        visit client_sessions_path&#10;&#10;        within(&quot;tr##{dom_id(client_session)}&quot;) do&#10;          expect(page).not_to have_button(&quot;Delete&quot;)&#10;        end&#10;      end&#10;&#10;      it &quot;shows modal informing credit note requirement on show page when trying to delete invoiced session&quot;, js: true do&#10;        pending &quot;implement credit note logic&quot;&#10;&#10;        visit client_session_path(client_session)&#10;&#10;        click_button &quot;Delete&quot;&#10;&#10;        expect(page).to have_content(&quot;Cannot delete session&quot;)&#10;        expect(page).to have_content(&quot;credit note must be issued&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Session calculations&quot; do&#10;    let!(:client_session) { FactoryBot.create(:client_session, client: client, duration: 90) }&#10;&#10;    it &quot;displays calculated session fee based on duration and hourly rate&quot; do&#10;      visit client_sessions_path&#10;&#10;      within(&quot;##{dom_id(client_session)}&quot;) do&#10;        expected_fee = (client_session.duration / 60.0) * client_session.hourly_session_rate&#10;        expect(page).to have_content(&quot;£#{sprintf('%.2f', expected_fee)}&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;displays hourly rate for the session&quot; do&#10;      visit client_sessions_path&#10;&#10;      within(&quot;##{dom_id(client_session)}&quot;) do&#10;        expect(page).to have_content(&quot;£#{sprintf('%.2f', client_session.hourly_session_rate)}&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Invoice integration&quot; do&#10;    let!(:client_session1) { FactoryBot.create(:client_session, client: client, duration: 60) }&#10;    let!(:client_session2) { FactoryBot.create(:client_session, client: client, duration: 90) }&#10;&#10;    context &quot;when sessions are unbilled&quot; do&#10;      it &quot;shows unbilled status&quot; do&#10;        visit client_sessions_path&#10;&#10;        within(&quot;##{dom_id(client_session1)}&quot;) do&#10;          expect(page).to have_content(&quot;Unbilled&quot;)&#10;        end&#10;      end&#10;    end&#10;&#10;    context &quot;when sessions are invoiced&quot; do&#10;      let!(:invoice) { FactoryBot.create(:invoice, client: client, status: 'created') }&#10;&#10;      before do&#10;        client_session1.update!(invoice: invoice)&#10;      end&#10;&#10;      it &quot;shows invoice status&quot; do&#10;        visit client_sessions_path&#10;&#10;        within(&quot;##{dom_id(client_session1)}&quot;) do&#10;          expect(page).to have_content(&quot;Created&quot;)&#10;        end&#10;      end&#10;&#10;      it &quot;provides link to invoice when session is invoiced&quot; do&#10;        visit client_session_path(client_session1)&#10;&#10;        expect(page).to have_link(&quot;Invoice ##{invoice.id}&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Filtering and search&quot; do&#10;    let!(:client2) { FactoryBot.create(:client, name: &quot;Another Client&quot;) }&#10;    let!(:session_client1) { FactoryBot.create(:client_session, client: client, description: &quot;Session for client 1&quot;) }&#10;    let!(:session_client2) { FactoryBot.create(:client_session, client: client2, description: &quot;Session for client 2&quot;) }&#10;&#10;    it &quot;displays sessions from all clients by default&quot; do&#10;      visit client_sessions_path&#10;&#10;      expect(page).to have_content(client.name)&#10;      expect(page).to have_content(client2.name)&#10;      expect(page).to have_content(&quot;Session for client 1&quot;)&#10;      expect(page).to have_content(&quot;Session for client 2&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Navigation&quot; do&#10;    it &quot;has proper navigation links&quot; do&#10;      visit client_sessions_path&#10;&#10;      expect(page).to have_link(&quot;New Client Session&quot;, href: new_client_session_path)&#10;    end&#10;&#10;    it &quot;can navigate between pages&quot; do&#10;      client_session = FactoryBot.create(:client_session, client: client)&#10;&#10;      visit client_sessions_path&#10;      click_link &quot;View&quot;&#10;&#10;      expect(page).to have_selector(&quot;h1&quot;, text: &quot;Session Details&quot;)&#10;      expect(current_path).to eq(client_session_path(client_session))&#10;&#10;      click_link &quot;Edit&quot;&#10;&#10;      expect(page).to have_selector(&quot;form[action='#{client_session_path(client_session)}']&quot;)&#10;      expect(current_path).to eq(edit_client_session_path(client_session))&#10;&#10;      click_link &quot;Back&quot;&#10;      expect(current_path).to eq(client_sessions_path)&#10;    end&#10;  end&#10;&#10;  describe &quot;Responsive design and accessibility&quot; do&#10;    let!(:client_session) { FactoryBot.create(:client_session, client: client) }&#10;&#10;    it &quot;displays properly on mobile devices&quot;, driver: :selenium_chrome_headless_mobile do&#10;      visit client_sessions_path&#10;&#10;      expect(page).to have_content(&quot;Client Sessions&quot;)&#10;      expect(page).to have_content(client.name)&#10;    end&#10;&#10;    it &quot;has accessible form labels&quot; do&#10;      visit new_client_session_path&#10;&#10;      expect(page).to have_selector(&quot;label[for='client_session_client_id']&quot;)&#10;      expect(page).to have_selector(&quot;label[for='client_session_session_date']&quot;)&#10;      expect(page).to have_selector(&quot;label[for='client_session_duration']&quot;)&#10;      expect(page).to have_selector(&quot;label[for='client_session_description']&quot;)&#10;    end&#10;  end&#10;end&#10;" />
              <option name="updatedContent" value="require 'rails_helper'&#10;&#10;RSpec.describe &quot;Client Sessions&quot;, type: :system do&#10;  let!(:client) { FactoryBot.create(:client) }&#10;  let!(:payee) { FactoryBot.create(:payee) }&#10;&#10;  describe &quot;Index page&quot; do&#10;    let!(:client_session1) { FactoryBot.create(:client_session, client: client, session_date: 1.week.ago, duration: 60, description: &quot;First session&quot;) }&#10;    let!(:client_session2) { FactoryBot.create(:client_session, client: client, session_date: 2.days.ago, duration: 90, description: &quot;Second session&quot;) }&#10;&#10;    it &quot;displays all client sessions ordered by date&quot; do&#10;      visit client_sessions_path&#10;&#10;      expect(page).to have_content(&quot;Client Sessions&quot;)&#10;      expect(page).to have_content(client.name)&#10;      expect(page).to have_content(&quot;First session&quot;)&#10;      expect(page).to have_content(&quot;Second session&quot;)&#10;      expect(page).to have_content(&quot;60 minutes&quot;)&#10;      expect(page).to have_content(&quot;90 minutes&quot;)&#10;&#10;      # Check that sessions are ordered by session_date ascending&#10;      session_rows = page.all(&quot;tbody tr&quot;)&#10;      expect(session_rows.first).to have_content(&quot;First session&quot;)&#10;      expect(session_rows.last).to have_content(&quot;Second session&quot;)&#10;    end&#10;&#10;    it &quot;shows invoice status for each session&quot; do&#10;      invoice = FactoryBot.create(:invoice, client: client, status: 'created')&#10;      client_session1.update!(invoice: invoice)&#10;&#10;      visit client_sessions_path&#10;&#10;      within(&quot;##{dom_id(client_session1)}&quot;) do&#10;        expect(page).to have_content(&quot;Created&quot;)&#10;      end&#10;&#10;      within(&quot;##{dom_id(client_session2)}&quot;) do&#10;        expect(page).to have_content(&quot;Unbilled&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;provides action buttons for each session&quot; do&#10;      visit client_sessions_path&#10;&#10;      within(&quot;##{dom_id(client_session1)}&quot;) do&#10;        expect(page).to have_link(&quot;View&quot;)&#10;        expect(page).to have_link(&quot;Edit&quot;)&#10;        expect(page).to have_button(&quot;Delete&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;has a link to create a new client session&quot; do&#10;      visit client_sessions_path&#10;&#10;      expect(page).to have_link(&quot;New Client Session&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Creating a new client session&quot; do&#10;    it &quot;allows creating a client session with valid information&quot; do&#10;      visit new_client_session_path&#10;&#10;      select client.name, from: &quot;Client&quot;&#10;      fill_in &quot;Session Date&quot;, with: Date.current.strftime(&quot;%d/%m/%Y&quot;)&#10;      fill_in &quot;Duration&quot;, with: &quot;90&quot;&#10;      fill_in &quot;Description&quot;, with: &quot;Test session description&quot;&#10;&#10;      click_button &quot;Create Client session&quot;&#10;&#10;      expect(page).to have_content(&quot;Client session was successfully created&quot;)&#10;&#10;      created_session = ClientSession.last&#10;      expect(created_session.client).to eq(client)&#10;      expect(created_session.duration).to eq(90)&#10;      expect(created_session.description).to eq(&quot;Test session description&quot;)&#10;      expect(created_session.session_date).to eq(Date.current)&#10;    end&#10;&#10;    it &quot;shows validation errors when submitting invalid information&quot;, js: true do&#10;      visit new_client_session_path&#10;&#10;      # Submit without filling any fields&#10;      click_button &quot;Create Client session&quot;&#10;&#10;      # Expect to see validation errors&#10;      expect(page).to have_content(&quot;prohibited this record from being saved&quot;)&#10;      expect(page).to have_content(&quot;Client can't be blank&quot;)&#10;      expect(page).to have_content(&quot;Session Date can't be blank&quot;)&#10;    end&#10;&#10;    it &quot;shows validation errors when duration is not a positive number&quot;, js: true do&#10;      visit new_client_session_path&#10;&#10;      select client.name, from: &quot;Client&quot;&#10;      fill_in &quot;Session Date&quot;, with: Date.current.strftime(&quot;%d/%m/%Y&quot;)&#10;      fill_in &quot;Duration&quot;, with: &quot;-30&quot;&#10;&#10;      click_button &quot;Create Client session&quot;&#10;&#10;      expect(page).to have_content(&quot;Duration (minutes) is too low&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Viewing a client session&quot; do&#10;    let!(:client_session) { FactoryBot.create(:client_session, client: client, duration: 75, description: &quot;Detailed session notes&quot;) }&#10;&#10;    it &quot;displays all session details&quot; do&#10;      visit client_session_path(client_session)&#10;&#10;      expect(page).to have_content(client.name)&#10;      expect(page).to have_content(&quot;75 minutes&quot;)&#10;      expect(page).to have_content(&quot;Detailed session notes&quot;)&#10;      expect(page).to have_content(client_session.session_date.strftime(&quot;%d %B %Y&quot;))&#10;    end&#10;&#10;    it &quot;provides action buttons&quot; do&#10;      visit client_session_path(client_session)&#10;&#10;      expect(page).to have_link(&quot;Edit&quot;)&#10;      expect(page).to have_button(&quot;Delete&quot;)&#10;      expect(page).to have_link(&quot;Back&quot;, href: client_sessions_path)&#10;    end&#10;  end&#10;&#10;  describe &quot;Editing a client session&quot; do&#10;    let!(:client_session) { FactoryBot.create(:client_session, client: client, duration: 60, description: &quot;Original description&quot;) }&#10;&#10;    it &quot;allows updating session information&quot; do&#10;      visit edit_client_session_path(client_session)&#10;&#10;      fill_in &quot;Duration&quot;, with: &quot;120&quot;&#10;      fill_in &quot;Description&quot;, with: &quot;Updated session description&quot;&#10;&#10;      click_button &quot;Update Client session&quot;&#10;&#10;      expect(page).to have_content(&quot;Client session was successfully updated&quot;)&#10;&#10;      client_session.reload&#10;      expect(client_session.duration).to eq(120)&#10;      expect(client_session.description).to eq(&quot;Updated session description&quot;)&#10;    end&#10;&#10;    it &quot;shows validation errors when updating with invalid information&quot;, js: true do&#10;      visit edit_client_session_path(client_session)&#10;&#10;      fill_in &quot;Duration&quot;, with: &quot;&quot;&#10;&#10;      click_button &quot;Update Client session&quot;&#10;&#10;      expect(page).to have_content(&quot;prohibited this record from being saved&quot;)&#10;      expect(page).to have_content(&quot;Duration (minutes) can't be blank&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Deleting a client session&quot;, js: true do&#10;    let!(:client_session) { FactoryBot.create(:client_session, client: client) }&#10;&#10;    shared_examples &quot;delete client session&quot; do&#10;      it &quot;allows deletion with confirmation dialog&quot; do&#10;        # Wait for the delete confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog[open]&quot;)&#10;        expect(page).to have_content(&quot;Are you sure you want to delete&quot;)&#10;        expect(page).to have_content(client_session.summary)&#10;&#10;        within(&quot;dialog&quot;) do&#10;          click_button &quot;Delete&quot;&#10;        end&#10;&#10;        expect(page).to have_content(&quot;Client session was successfully destroyed&quot;)&#10;        expect(ClientSession.exists?(client_session.id)).to be_falsey&#10;      end&#10;&#10;      it &quot;allows canceling the delete action&quot; do&#10;        within(&quot;dialog&quot;) do&#10;          click_button &quot;Cancel&quot;&#10;        end&#10;&#10;        # Dialog should close and session should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;        expect(ClientSession.exists?(client_session.id)).to be_truthy&#10;      end&#10;&#10;      it &quot;allows canceling by clicking outside the dialog&quot; do&#10;        # Wait for the delete confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog[open]&quot;)&#10;&#10;        # Click outside the dialog (on the dialog backdrop)&#10;        page.execute_script(&quot;document.querySelector('dialog[open]').click()&quot;)&#10;&#10;        # Dialog should close and session should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;        expect(ClientSession.exists?(client_session.id)).to be_truthy&#10;      end&#10;&#10;      it &quot;redirects to index page after successful deletion&quot; do&#10;        within(&quot;dialog&quot;) do&#10;          click_button &quot;Delete&quot;&#10;        end&#10;&#10;        # Wait for the redirect to complete&#10;        expect(page).to have_content(&quot;Client session was successfully destroyed&quot;)&#10;        expect(current_path).to eq(client_sessions_path)&#10;      end&#10;&#10;    end&#10;&#10;    context &quot;when session is not invoiced&quot; do&#10;      context &quot;when deleting from index page&quot; do&#10;        before do&#10;          visit client_sessions_path&#10;&#10;          within(&quot;tr##{dom_id(client_session)}&quot;) do&#10;            click_button &quot;Delete&quot;&#10;          end&#10;        end&#10;&#10;        include_examples &quot;delete client session&quot;&#10;      end&#10;&#10;      context &quot;when deleting from show page&quot; do&#10;        before do&#10;          visit client_session_path(client_session)&#10;          click_button &quot;Delete&quot;&#10;        end&#10;&#10;        include_examples &quot;delete client session&quot;&#10;      end&#10;    end&#10;&#10;    context &quot;when session is invoiced&quot; do&#10;      let!(:invoice) { FactoryBot.create(:invoice, client: client, status: 'sent') }&#10;&#10;      before do&#10;        client_session.update!(invoice: invoice)&#10;      end&#10;&#10;      it &quot;does not show delete button on index page when session is invoiced and sent&quot; do&#10;        visit client_sessions_path&#10;&#10;        within(&quot;tr##{dom_id(client_session)}&quot;) do&#10;          expect(page).not_to have_button(&quot;Delete&quot;)&#10;        end&#10;      end&#10;&#10;      it &quot;shows modal informing credit note requirement on show page when trying to delete invoiced session&quot;, js: true do&#10;        pending &quot;implement credit note logic&quot;&#10;&#10;        visit client_session_path(client_session)&#10;&#10;        click_button &quot;Delete&quot;&#10;&#10;        expect(page).to have_content(&quot;Cannot delete session&quot;)&#10;        expect(page).to have_content(&quot;credit note must be issued&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Session calculations&quot; do&#10;    let!(:client_session) { FactoryBot.create(:client_session, client: client, duration: 90) }&#10;&#10;    it &quot;displays calculated session fee based on duration and hourly rate&quot; do&#10;      visit client_sessions_path&#10;&#10;      within(&quot;##{dom_id(client_session)}&quot;) do&#10;        expected_fee = (client_session.duration / 60.0) * client_session.hourly_session_rate&#10;        expect(page).to have_content(&quot;£#{sprintf('%.2f', expected_fee)}&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;displays hourly rate for the session&quot; do&#10;      visit client_sessions_path&#10;&#10;      within(&quot;##{dom_id(client_session)}&quot;) do&#10;        expect(page).to have_content(&quot;£#{sprintf('%.2f', client_session.hourly_session_rate)}&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Invoice integration&quot; do&#10;    let!(:client_session1) { FactoryBot.create(:client_session, client: client, duration: 60) }&#10;    let!(:client_session2) { FactoryBot.create(:client_session, client: client, duration: 90) }&#10;&#10;    context &quot;when sessions are unbilled&quot; do&#10;      it &quot;shows unbilled status&quot; do&#10;        visit client_sessions_path&#10;&#10;        within(&quot;##{dom_id(client_session1)}&quot;) do&#10;          expect(page).to have_content(&quot;Unbilled&quot;)&#10;        end&#10;      end&#10;    end&#10;&#10;    context &quot;when sessions are invoiced&quot; do&#10;      let!(:invoice) { FactoryBot.create(:invoice, client: client, status: 'created') }&#10;&#10;      before do&#10;        client_session1.update!(invoice: invoice)&#10;      end&#10;&#10;      it &quot;shows invoice status&quot; do&#10;        visit client_sessions_path&#10;&#10;        within(&quot;##{dom_id(client_session1)}&quot;) do&#10;          expect(page).to have_content(&quot;Created&quot;)&#10;        end&#10;      end&#10;&#10;      it &quot;provides link to invoice when session is invoiced&quot; do&#10;        visit client_session_path(client_session1)&#10;&#10;        expect(page).to have_link(&quot;Invoice ##{invoice.id}&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Filtering and search&quot; do&#10;    let!(:client2) { FactoryBot.create(:client, name: &quot;Another Client&quot;) }&#10;    let!(:session_client1) { FactoryBot.create(:client_session, client: client, description: &quot;Session for client 1&quot;) }&#10;    let!(:session_client2) { FactoryBot.create(:client_session, client: client2, description: &quot;Session for client 2&quot;) }&#10;&#10;    it &quot;displays sessions from all clients by default&quot; do&#10;      visit client_sessions_path&#10;&#10;      expect(page).to have_content(client.name)&#10;      expect(page).to have_content(client2.name)&#10;      expect(page).to have_content(&quot;Session for client 1&quot;)&#10;      expect(page).to have_content(&quot;Session for client 2&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Navigation&quot; do&#10;    it &quot;has proper navigation links&quot; do&#10;      visit client_sessions_path&#10;&#10;      expect(page).to have_link(&quot;New Client Session&quot;, href: new_client_session_path)&#10;    end&#10;&#10;    it &quot;can navigate between pages&quot; do&#10;      client_session = FactoryBot.create(:client_session, client: client)&#10;&#10;      visit client_sessions_path&#10;      click_link &quot;View&quot;&#10;&#10;      expect(page).to have_selector(&quot;h1&quot;, text: &quot;Session Details&quot;)&#10;      expect(current_path).to eq(client_session_path(client_session))&#10;&#10;      click_link &quot;Edit&quot;&#10;&#10;      expect(page).to have_selector(&quot;form[action='#{client_session_path(client_session)}']&quot;)&#10;      expect(current_path).to eq(edit_client_session_path(client_session))&#10;&#10;      click_link &quot;Back&quot;&#10;      expect(current_path).to eq(client_sessions_path)&#10;    end&#10;  end&#10;&#10;  describe &quot;Responsive design and accessibility&quot; do&#10;    let!(:client_session) { FactoryBot.create(:client_session, client: client) }&#10;&#10;    it &quot;displays properly on mobile devices&quot;, driver: :selenium_chrome_headless_mobile do&#10;      visit client_sessions_path&#10;&#10;      expect(page).to have_content(&quot;Client Sessions&quot;)&#10;      expect(page).to have_content(client.name)&#10;    end&#10;&#10;    it &quot;has accessible form labels&quot; do&#10;      visit new_client_session_path&#10;&#10;      expect(page).to have_selector(&quot;label[for='client_session_client_id']&quot;)&#10;      expect(page).to have_selector(&quot;label[for='client_session_session_date']&quot;)&#10;      expect(page).to have_selector(&quot;label[for='client_session_duration']&quot;)&#10;      expect(page).to have_selector(&quot;label[for='client_session_description']&quot;)&#10;    end&#10;  end&#10;end&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>