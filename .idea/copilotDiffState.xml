<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/assets/stylesheets/dialogues.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/assets/stylesheets/dialogues.css" />
              <option name="updatedContent" value="/* Shared dialog styles */&#10;dialog {&#10;  padding: 0;&#10;  border: none;&#10;  border-radius: 8px;&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;  max-width: 450px;&#10;  width: 100%;&#10;}&#10;&#10;dialog::backdrop {&#10;  background-color: rgba(0, 0, 0, 0.5);&#10;}&#10;&#10;.dialog-content {&#10;  padding: 20px;&#10;}&#10;&#10;.dialog-buttons {&#10;  display: flex;&#10;  justify-content: flex-end;&#10;  gap: 10px;&#10;  margin-top: 20px;&#10;}&#10;&#10;.dialog-form {&#10;  display: inline;&#10;}&#10;&#10;/* Bold styling for highlighted text in dialogs */&#10;[id$=&quot;-to-delete&quot;],&#10;[id$=&quot;-to-send&quot;],&#10;[id$=&quot;-to-mark-paid&quot;] {&#10;  font-weight: bold;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/client_sessions/_form.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/client_sessions/_form.html.erb" />
              <option name="originalContent" value="&lt;%= form_with(model: client_session, class: &quot;pure-form pure-form-stacked&quot;, data: { controller: &quot;validation client-rate&quot; }) do |form| %&gt;&#10;  &lt;%= render 'shared/error_explanation', model: client_session %&gt;&#10;&#10;  &lt;fieldset&gt;&#10;    &lt;legend&gt;Session Information&lt;/legend&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1&quot;&gt;&#10;        &lt;%= form.label :client_id, &quot;Client&quot; %&gt;&#10;        &lt;%= form.collection_select :client_id, Client.where(active: true), :id, :name,&#10;            { prompt: &quot;Select a client&quot; },&#10;            { required: true, class: &quot;pure-input-1&quot;,&#10;              data: {&#10;                action: &quot;invalid-&gt;validation#markFieldAsInvalid change-&gt;client-rate#fetchClientRate&quot;,&#10;                client_rate_target: &quot;clientSelect&quot;&#10;              }&#10;            }&#10;        %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :hourly_session_rate_pence, &quot;Rate (£ per hour)&quot; %&gt;&#10;        &lt;%= form.text_field :hourly_session_rate_pence,&#10;            readonly: true,&#10;            class: &quot;pure-input-1&quot;,&#10;            data: { client_rate_target: &quot;rateField&quot; },&#10;            value: number_to_currency(client_session.hourly_session_rate&amp;.to_f || 0, unit: &quot;£&quot;)&#10;        %&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :session_date, &quot;Session Date&quot; %&gt;&#10;        &lt;%= form.date_field :session_date, required: true, class: &quot;pure-input-1&quot;, data: { action: &quot;invalid-&gt;validation#markFieldAsInvalid&quot; } %&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :duration, &quot;Duration (minutes)&quot; %&gt;&#10;        &lt;%= form.number_field :duration, required: true, min: 1, class: &quot;pure-input-1&quot;, data: { action: &quot;invalid-&gt;validation#markFieldAsInvalid&quot; } %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1&quot;&gt;&#10;        &lt;%= form.label :description, &quot;Session Description&quot; %&gt;&#10;        &lt;%= form.text_area :description, class: &quot;pure-input-1&quot;, rows: 3, placeholder: &quot;Enter session details or notes here&quot; %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/fieldset&gt;&#10;&#10;  &lt;div class=&quot;actions&quot;&gt;&#10;    &lt;%= form.submit class: &quot;pure-button pure-button-primary&quot;, data: { action: &quot;click-&gt;validation#resetValidationErrorText&quot; }  %&gt;&#10;  &lt;/div&gt;&#10;&lt;% end %&gt;&#10;" />
              <option name="updatedContent" value="&lt;%= form_with(model: client_session, class: &quot;pure-form pure-form-stacked&quot;, data: { controller: &quot;validation client-rate&quot; }) do |form| %&gt;&#10;  &lt;%= render 'shared/error_explanation', model: client_session %&gt;&#10;&#10;  &lt;fieldset&gt;&#10;    &lt;legend&gt;Session Information&lt;/legend&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1&quot;&gt;&#10;        &lt;%= form.label :client_id, &quot;Client&quot; %&gt;&#10;        &lt;%= form.collection_select :client_id, Client.where(active: true), :id, :name,&#10;            { prompt: &quot;Select a client&quot; },&#10;            { required: true, class: &quot;pure-input-1&quot;,&#10;              data: {&#10;                action: &quot;invalid-&gt;validation#markFieldAsInvalid change-&gt;client-rate#fetchClientRate&quot;,&#10;                client_rate_target: &quot;clientSelect&quot;&#10;              }&#10;            }&#10;        %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :hourly_session_rate_pence, &quot;Rate (£ per hour)&quot; %&gt;&#10;        &lt;%= form.text_field :hourly_session_rate_pence,&#10;            readonly: true,&#10;            class: &quot;pure-input-1&quot;,&#10;            data: { client_rate_target: &quot;rateField&quot; },&#10;            value: number_to_currency(client_session.hourly_session_rate&amp;.to_f || 0, unit: &quot;£&quot;)&#10;        %&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :session_date, &quot;Session Date&quot; %&gt;&#10;        &lt;%= form.date_field :session_date, required: true, class: &quot;pure-input-1&quot;, data: { action: &quot;invalid-&gt;validation#markFieldAsInvalid&quot; } %&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :duration, &quot;Duration (minutes)&quot; %&gt;&#10;        &lt;%= form.number_field :duration, required: true, min: 1, class: &quot;pure-input-1&quot;, data: { action: &quot;invalid-&gt;validation#markFieldAsInvalid&quot; } %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1&quot;&gt;&#10;        &lt;%= form.label :description, &quot;Session Description&quot; %&gt;&#10;        &lt;%= form.text_area :description, class: &quot;pure-input-1&quot;, rows: 3, placeholder: &quot;Enter session details or notes here&quot; %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/fieldset&gt;&#10;&#10;  &lt;div class=&quot;form-buttons&quot;&gt;&#10;    &lt;%= form.submit class: &quot;pure-button pure-button-primary&quot;, data: { action: &quot;click-&gt;validation#resetValidationErrorText&quot; }  %&gt;&#10;    &lt;%= link_to &quot;Cancel&quot;, client_sessions_path, class: &quot;pure-button&quot; %&gt;&#10;  &lt;/div&gt;&#10;&lt;% end %&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/invoices/_buttons.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/invoices/_buttons.html.erb" />
              <option name="originalContent" value="&lt;% if invoice.created? %&gt;&#10;  &lt;%= render partial: 'shared/delete_confirmation', locals: {&#10;    entity: invoice,&#10;    button_size: button_size&#10;  } %&gt;&#10;  &lt;%= link_to edit_invoice_path(invoice), class: &quot;pure-button #{button_size}&quot; do %&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;edit&lt;/span&gt; Edit&#10;  &lt;% end %&gt;&#10;&lt;% end %&gt;&#10;&#10;&lt;% unless invoice.paid? %&gt;&#10;  &lt;div data-controller=&quot;send-confirmation&quot; display=&quot;inline&quot;&gt;&#10;    &lt;button class=&quot;pure-button pure-button-primary send-invoice-btn &lt;%=button_size%&gt;&quot;&#10;            data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;            data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;            data-action=&quot;click-&gt;send-confirmation#open&quot;&gt;&#10;      &lt;span class=&quot;material-symbols-outlined&quot;&gt;mail&lt;/span&gt; Send&#10;    &lt;/button&gt;&#10;  &lt;/div&gt;&#10;  &lt;%= render partial: 'shared/send_confirmation_dialog' %&gt;&#10;&#10;  &lt;button class=&quot;pure-button button-success mark-paid-btn &lt;%=button_size%&gt;&quot;&#10;          data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;          data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;          data-controller=&quot;mark-paid&quot;&#10;          data-action=&quot;click-&gt;mark-paid#open&quot;&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;check&lt;/span&gt; Mark as Paid&#10;  &lt;/button&gt;&#10;&lt;% end %&gt;" />
              <option name="updatedContent" value="&lt;% if invoice.created? %&gt;&#10;  &lt;%= render partial: 'shared/delete_confirmation', locals: {&#10;    entity: invoice,&#10;    button_size: button_size&#10;  } %&gt;&#10;  &lt;%= link_to edit_invoice_path(invoice), class: &quot;pure-button #{button_size}&quot; do %&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;edit&lt;/span&gt; Edit&#10;  &lt;% end %&gt;&#10;&lt;% end %&gt;&#10;&#10;&lt;% unless invoice.paid? %&gt;&#10;  &lt;div data-controller=&quot;send-confirmation&quot; style=&quot;display: inline&quot;&gt;&#10;    &lt;button class=&quot;pure-button pure-button-primary send-invoice-btn &lt;%=button_size%&gt;&quot;&#10;            data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;            data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;            data-action=&quot;click-&gt;send-confirmation#open&quot;&gt;&#10;      &lt;span class=&quot;material-symbols-outlined&quot;&gt;mail&lt;/span&gt; Send&#10;    &lt;/button&gt;&#10;  &lt;/div&gt;&#10;&#10;  &lt;button class=&quot;pure-button button-success mark-paid-btn &lt;%=button_size%&gt;&quot;&#10;          data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;          data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;          data-controller=&quot;mark-paid&quot;&#10;          data-action=&quot;click-&gt;mark-paid#open&quot;&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;check&lt;/span&gt; Mark as Paid&#10;  &lt;/button&gt;&#10;&lt;% end %&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/shared/_delete_confirmation.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/shared/_delete_confirmation.html.erb" />
              <option name="originalContent" value="&lt;div data-controller=&quot;delete-confirmation&quot; style=&quot;display: inline&quot;&gt;&#10;  &lt;button class=&quot;pure-button button-danger &lt;%= button_size %&gt;&quot;&#10;          data-id=&quot;&lt;%= entity.id %&gt;&quot;&#10;          data-entity-type=&quot;&lt;%= entity.class.to_s.parameterize %&gt;&quot;&#10;          data-name=&quot;&lt;%= entity.respond_to?(:summary) ? entity.summary : entity.to_s %&gt;&quot;&#10;          data-action=&quot;click-&gt;delete-confirmation#open&quot;&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;delete&lt;/span&gt; Delete&#10;  &lt;/button&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Delete Confirmation Modal --&gt;&#10;&lt;% unless @delete_confirmation_rendered %&gt;&#10;  &lt;% content_for :dialogues do %&gt;&#10;    &lt;dialog data-controller=&quot;delete-modal&quot; data-delete-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;delete-modal#clickOutside&quot;&gt;&#10;      &lt;div class=&quot;dialog-content&quot;&gt;&#10;        &lt;h3&gt;Confirm Deletion&lt;/h3&gt;&#10;        &lt;p&gt;Are you sure you want to delete: &lt;span data-delete-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;        &lt;p&gt;This action cannot be undone.&lt;/p&gt;&#10;        &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;          &lt;button id=&quot;cancel-delete&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;delete-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;          &lt;%= form_tag &quot;&quot;, method: :delete, class: &quot;dialog-form&quot;, data: { delete_modal_target: &quot;form&quot; } do %&gt;&#10;            &lt;button type=&quot;submit&quot; class=&quot;pure-button pure-button-primary button-danger&quot; data-action=&quot;click-&gt;delete-modal#close&quot;&gt;&#10;              &lt;span class=&quot;material-symbols-outlined&quot;&gt;delete&lt;/span&gt; Delete&#10;            &lt;/button&gt;&#10;          &lt;% end %&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/dialog&gt;&#10;  &lt;% end %&gt;&#10;  &lt;% @delete_confirmation_rendered = true %&gt;&#10;&lt;% end %&gt;&#10;&#10;&lt;style&gt;&#10;    /* Dialog styles */&#10;    #delete-confirmation-dialog {&#10;        padding: 0;&#10;        border: none;&#10;        border-radius: 8px;&#10;        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;        max-width: 450px;&#10;        width: 100%;&#10;    }&#10;&#10;    #delete-confirmation-dialog::backdrop {&#10;        background-color: rgba(0, 0, 0, 0.5);&#10;    }&#10;&#10;    .dialog-content {&#10;        padding: 20px;&#10;    }&#10;&#10;    .dialog-buttons {&#10;        display: flex;&#10;        justify-content: flex-end;&#10;        gap: 10px;&#10;        margin-top: 20px;&#10;    }&#10;&#10;    .dialog-form {&#10;        display: inline;&#10;    }&#10;&#10;    [id$=&quot;-to-delete&quot;] {&#10;        font-weight: bold;&#10;    }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;div data-controller=&quot;delete-confirmation&quot; style=&quot;display: inline&quot;&gt;&#10;  &lt;button class=&quot;pure-button button-danger &lt;%= button_size %&gt;&quot;&#10;          data-id=&quot;&lt;%= entity.id %&gt;&quot;&#10;          data-entity-type=&quot;&lt;%= entity.class.to_s.parameterize %&gt;&quot;&#10;          data-name=&quot;&lt;%= entity.respond_to?(:summary) ? entity.summary : entity.to_s %&gt;&quot;&#10;          data-action=&quot;click-&gt;delete-confirmation#open&quot;&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;delete&lt;/span&gt; Delete&#10;  &lt;/button&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Delete Confirmation Modal --&gt;&#10;&lt;% unless @delete_confirmation_rendered %&gt;&#10;  &lt;% content_for :dialogues do %&gt;&#10;    &lt;dialog data-controller=&quot;delete-modal&quot; data-delete-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;delete-modal#clickOutside&quot;&gt;&#10;      &lt;div class=&quot;dialog-content&quot;&gt;&#10;        &lt;h3&gt;Confirm Deletion&lt;/h3&gt;&#10;        &lt;p&gt;Are you sure you want to delete: &lt;span data-delete-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;        &lt;p&gt;This action cannot be undone.&lt;/p&gt;&#10;        &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;          &lt;button id=&quot;cancel-delete&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;delete-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;          &lt;%= form_tag &quot;&quot;, method: :delete, class: &quot;dialog-form&quot;, data: { delete_modal_target: &quot;form&quot; } do %&gt;&#10;            &lt;button type=&quot;submit&quot; class=&quot;pure-button pure-button-primary button-danger&quot; data-action=&quot;click-&gt;delete-modal#close&quot;&gt;&#10;              &lt;span class=&quot;material-symbols-outlined&quot;&gt;delete&lt;/span&gt; Delete&#10;            &lt;/button&gt;&#10;          &lt;% end %&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/dialog&gt;&#10;  &lt;% end %&gt;&#10;  &lt;% @delete_confirmation_rendered = true %&gt;&#10;&lt;% end %&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/shared/_mark_paid_confirmation_dialog.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/shared/_mark_paid_confirmation_dialog.html.erb" />
              <option name="originalContent" value="&lt;!-- Dialog for mark paid confirmation --&gt;&#10;&lt;dialog id=&quot;mark-paid-confirmation-dialog&quot; data-controller=&quot;mark-paid-modal&quot; data-mark-paid-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;mark-paid-modal#clickOutside&quot;&gt;&#10;  &lt;div class=&quot;dialog-content&quot;&gt;&#10;    &lt;h3&gt;Confirm Mark Invoice as Paid&lt;/h3&gt;&#10;    &lt;p&gt;Are you sure you want to mark the invoice as paid: &lt;span data-mark-paid-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;    &lt;p&gt;This will change the invoice status to &quot;paid&quot; and it cannot be undone.&lt;/p&gt;&#10;    &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;      &lt;button id=&quot;cancel-mark-paid&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;mark-paid-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;      &lt;%= form_tag &quot;&quot;, method: :put, id: &quot;mark-paid-invoice-form&quot;, class: &quot;dialog-form&quot;,&#10;                   data: { mark_paid_modal_target: &quot;form&quot;, action: &quot;submit-&gt;mark-paid-modal#close&quot; } do %&gt;&#10;        &lt;%= hidden_field_tag &quot;invoice[status]&quot;, &quot;paid&quot; %&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;pure-button button-success&quot;&gt;Mark as Paid&lt;/button&gt;&#10;      &lt;% end %&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/dialog&gt;&#10;&#10;&lt;style&gt;&#10;  /* Dialog styles */&#10;  #mark-paid-confirmation-dialog {&#10;    padding: 0;&#10;    border: none;&#10;    border-radius: 8px;&#10;    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;    max-width: 450px;&#10;    width: 100%;&#10;  }&#10;&#10;  #mark-paid-confirmation-dialog::backdrop {&#10;    background-color: rgba(0, 0, 0, 0.5);&#10;  }&#10;&#10;  .dialog-content {&#10;    padding: 20px;&#10;  }&#10;&#10;  .dialog-buttons {&#10;    display: flex;&#10;    justify-content: flex-end;&#10;    gap: 10px;&#10;    margin-top: 20px;&#10;  }&#10;&#10;  .dialog-form {&#10;    display: inline;&#10;  }&#10;&#10;  #invoice-to-mark-paid {&#10;    font-weight: bold;&#10;  }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;!-- Dialog for mark paid confirmation --&gt;&#10;&lt;dialog id=&quot;mark-paid-confirmation-dialog&quot; data-controller=&quot;mark-paid-modal&quot; data-mark-paid-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;mark-paid-modal#clickOutside&quot;&gt;&#10;  &lt;div class=&quot;dialog-content&quot;&gt;&#10;    &lt;h3&gt;Confirm Mark Invoice as Paid&lt;/h3&gt;&#10;    &lt;p&gt;Are you sure you want to mark the invoice as paid: &lt;span data-mark-paid-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;    &lt;p&gt;This will change the invoice status to &quot;paid&quot; and it cannot be undone.&lt;/p&gt;&#10;    &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;      &lt;button id=&quot;cancel-mark-paid&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;mark-paid-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;      &lt;%= form_tag &quot;&quot;, method: :put, id: &quot;mark-paid-invoice-form&quot;, class: &quot;dialog-form&quot;,&#10;                   data: { mark_paid_modal_target: &quot;form&quot;, action: &quot;submit-&gt;mark-paid-modal#close&quot; } do %&gt;&#10;        &lt;%= hidden_field_tag &quot;invoice[status]&quot;, &quot;paid&quot; %&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;pure-button button-success&quot;&gt;Mark as Paid&lt;/button&gt;&#10;      &lt;% end %&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/dialog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/shared/_send_confirmation_dialog.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/shared/_send_confirmation_dialog.html.erb" />
              <option name="originalContent" value="&lt;!-- Dialog for send confirmation --&gt;&#10;&lt;dialog id=&quot;send-confirmation-dialog&quot; data-controller=&quot;send-modal&quot; data-send-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;send-modal#clickOutside&quot;&gt;&#10;  &lt;div class=&quot;dialog-content&quot;&gt;&#10;    &lt;h3&gt;Confirm Send Invoice&lt;/h3&gt;&#10;    &lt;p&gt;Are you sure you want to send the invoice: &lt;span id=&quot;invoice-to-send&quot; data-send-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;    &lt;p&gt;This will send the invoice to the client and change its status to &quot;sent&quot;.&lt;/p&gt;&#10;    &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;      &lt;button id=&quot;cancel-send&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;send-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;      &lt;%= form_tag &quot;&quot;, method: :post, id: &quot;send-invoice-form&quot;, class: &quot;dialog-form&quot;, data: { send_modal_target: &quot;form&quot; } do %&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;pure-button pure-button-primary&quot;&gt;Send Invoice&lt;/button&gt;&#10;      &lt;% end %&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/dialog&gt;&#10;&#10;&lt;style&gt;&#10;  /* Dialog styles */&#10;  #send-confirmation-dialog {&#10;    padding: 0;&#10;    border: none;&#10;    border-radius: 8px;&#10;    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;    max-width: 450px;&#10;    width: 100%;&#10;  }&#10;&#10;  #send-confirmation-dialog::backdrop {&#10;    background-color: rgba(0, 0, 0, 0.5);&#10;  }&#10;&#10;  .dialog-content {&#10;    padding: 20px;&#10;  }&#10;&#10;  .dialog-buttons {&#10;    display: flex;&#10;    justify-content: flex-end;&#10;    gap: 10px;&#10;    margin-top: 20px;&#10;  }&#10;&#10;  .dialog-form {&#10;    display: inline;&#10;  }&#10;&#10;  #invoice-to-send {&#10;    font-weight: bold;&#10;  }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;!-- Dialog for send confirmation --&gt;&#10;&lt;dialog id=&quot;send-confirmation-dialog&quot; data-controller=&quot;send-modal&quot; data-send-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;send-modal#clickOutside&quot;&gt;&#10;  &lt;div class=&quot;dialog-content&quot;&gt;&#10;    &lt;h3&gt;Confirm Send Invoice&lt;/h3&gt;&#10;    &lt;p&gt;Are you sure you want to send the invoice: &lt;span id=&quot;invoice-to-send&quot; data-send-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;    &lt;p&gt;This will send the invoice to the client and change its status to &quot;sent&quot;.&lt;/p&gt;&#10;    &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;      &lt;button id=&quot;cancel-send&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;send-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;      &lt;%= form_tag &quot;&quot;, method: :post, id: &quot;send-invoice-form&quot;, class: &quot;dialog-form&quot;, data: { send_modal_target: &quot;form&quot; } do %&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;pure-button pure-button-primary&quot;&gt;Send Invoice&lt;/button&gt;&#10;      &lt;% end %&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/dialog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/spec/system/invoices_spec.rb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/spec/system/invoices_spec.rb" />
              <option name="originalContent" value="require 'rails_helper'&#10;&#10;RSpec.describe &quot;Invoices&quot;, type: :system do&#10;  include ActionText::SystemTestHelper&#10;&#10;  let!(:client) { FactoryBot.create(:client) }&#10;  let!(:payee) { FactoryBot.create(:payee) }&#10;  let!(:client_sessions) do&#10;    [&#10;      FactoryBot.create(:client_session, client: client, session_date: 1.week.ago, duration: 60),&#10;      FactoryBot.create(:client_session, client: client, session_date: 2.weeks.ago, duration: 90),&#10;      FactoryBot.create(:client_session, client: client, session_date: 3.weeks.ago, duration: 45)&#10;    ]&#10;  end&#10;&#10;  describe &quot;Invoice index page&quot; do&#10;    let!(:paid_invoice) { FactoryBot.create(:invoice, client: client, status: :paid) }&#10;    let!(:sent_invoice) { FactoryBot.create(:invoice, client: client, status: :sent) }&#10;    let!(:created_invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;displays all invoices with correct information&quot; do&#10;      visit invoices_path&#10;&#10;      expect(page).to have_content(&quot;Invoices&quot;)&#10;      expect(page).to have_link(created_invoice.id.to_s, href: invoice_path(created_invoice))&#10;      expect(page).to have_link(sent_invoice.id.to_s, href: invoice_path(sent_invoice))&#10;      expect(page).to have_link(paid_invoice.id.to_s, href: invoice_path(paid_invoice))&#10;      expect(page).to have_content(client.name)&#10;    end&#10;&#10;    it &quot;shows correct status badges for different invoice statuses&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.created&quot;, text: &quot;CREATED&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.sent&quot;, text: &quot;SENT&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.paid&quot;, text: &quot;PAID&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;shows delete button only for created invoices&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_button(&quot;Delete&quot;)&#10;        expect(page).to have_link(&quot;Edit&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).not_to have_button(&quot;Delete&quot;)&#10;        expect(page).not_to have_link(&quot;Edit&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).not_to have_button(&quot;Delete&quot;)&#10;        expect(page).not_to have_link(&quot;Edit&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;shows send button for created and sent invoices but not paid invoices&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_button(&quot;Send&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).to have_button(&quot;Send&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).not_to have_button(&quot;Send&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Creating a new invoice&quot; do&#10;    it &quot;allows creating an invoice with selected sessions&quot; do&#10;      visit new_client_invoice_path(client)&#10;&#10;      expect(page).to have_content(&quot;New Invoice for #{client.name}&quot;)&#10;&#10;      # Fill in invoice details&#10;      fill_in &quot;Date&quot;, with: Date.current.strftime(&quot;%Y-%m-%d&quot;)&#10;      select payee.name, from: &quot;Payee&quot;&#10;      fill_in_rich_textarea &quot;Text&quot;, with: &quot;Invoice for consulting services&quot;&#10;&#10;      # Select some sessions&#10;      uncheck &quot;session_#{client_sessions[2].id}&quot;&#10;&#10;      click_button &quot;Create Invoice&quot;&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully generated&quot;)&#10;&#10;      # Verify the invoice was created correctly&#10;      invoice = Invoice.last&#10;      expect(invoice.client).to eq(client)&#10;      expect(invoice.payee).to eq(payee)&#10;      expect(invoice.text.body.to_plain_text).to eq(&quot;Invoice for consulting services&quot;)&#10;      expect(invoice.client_sessions).to include(client_sessions[0], client_sessions[1])&#10;      expect(invoice.client_sessions).not_to include(client_sessions[2])&#10;    end&#10;&#10;    it &quot;prepopulates text field with relevant messages when creating new invoice&quot;, js: true do&#10;      # Create some messages for the client&#10;      message1 = FactoryBot.create(:message, :for_all_clients, text: &quot;General Message for all clients&quot;, created_at: 1.week.ago)&#10;      message2 = FactoryBot.create(:message, text: &quot;Specific Message for #{client.name}&quot;, created_at: 2.days.ago).apply_to_client(client)&#10;&#10;      visit new_client_invoice_path(client)&#10;&#10;      within(&quot;#invoice_text&quot;) do&#10;        expect(page).to have_content(&quot;General Message for all clients&quot;)&#10;        expect(page).to have_content(&quot;Specific Message for #{client.name}&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Viewing an invoice&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, payee: payee, text: &quot;Test invoice text&quot;) }&#10;&#10;    it &quot;displays invoice details correctly&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      within(&quot;div.invoice-info &gt; table &gt; tbody &gt; tr:nth-child(1)&quot;) do&#10;        expect(page).to have_content(&quot;Invoice Number&quot;)&#10;        expect(page).to have_content(invoice.id.to_s)&#10;      end&#10;&#10;      within(&quot;div.invoice-info &gt; table &gt; tbody &gt; tr:nth-child(2)&quot;) do&#10;        expect(page).to have_content(&quot;Date&quot;)&#10;        expect(page).to have_content(invoice.date.strftime('%d %b %Y'))&#10;      end&#10;&#10;      expect(page).to have_content(client.name)&#10;      expect(page).to have_content(payee.name)&#10;      expect(page).to have_content(&quot;Test invoice text&quot;)&#10;    end&#10;&#10;    it &quot;shows session details in the invoice&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      invoice.client_sessions.each do |session|&#10;        expect(page).to have_content(session.session_date.strftime('%d %b %Y'))&#10;        expect(page).to have_content(&quot;#{session.duration} minutes&quot;)&#10;        expect(page).to have_content(session.hourly_session_rate.format)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Editing an invoice&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;allows editing a created invoice&quot; do&#10;      visit edit_invoice_path(invoice)&#10;&#10;      expect(page).to have_content(&quot;Edit Invoice&quot;)&#10;&#10;      fill_in_rich_textarea &quot;Text&quot;, with: &quot;Updated invoice text&quot;&#10;      click_button &quot;Update Invoice&quot;&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully updated&quot;)&#10;      expect(page).to have_content(&quot;Updated invoice text&quot;)&#10;    end&#10;&#10;    it &quot;prevents editing sent invoices&quot; do&#10;      invoice.update!(status: :sent)&#10;&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;&#10;      # Try to access edit page directly&#10;      visit edit_invoice_path(invoice)&#10;      expect(page).to have_content(&quot;Cannot edit invoice that has been sent or paid&quot;)&#10;    end&#10;&#10;    it &quot;prevents editing paid invoices&quot; do&#10;      invoice.update!(status: :paid)&#10;&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;&#10;      # Try to access edit page directly&#10;      visit edit_invoice_path(invoice)&#10;      expect(page).to have_content(&quot;Cannot edit invoice that has been sent or paid&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Sending an invoice&quot;, js: true do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    shared_examples &quot;send invoice&quot; do&#10;      it &quot;allows sending an invoice with confirmation dialog&quot; do&#10;        # Wait for the send confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(page).to have_content(&quot;Confirm Send Invoice&quot;)&#10;        expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;&#10;        within(&quot;dialog#send-confirmation-dialog&quot;) do&#10;          click_button &quot;Send Invoice&quot;&#10;        end&#10;&#10;        expect(page).to have_content(&quot;Invoice was successfully sent&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling the send action&quot; do&#10;        within(&quot;dialog#send-confirmation-dialog&quot;) do&#10;          click_button &quot;Cancel&quot;&#10;        end&#10;&#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;created&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling by clicking outside the dialog&quot; do&#10;        # Wait for the send confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;&#10;        # Click outside the dialog (on the dialog backdrop)&#10;        page.execute_script(&quot;document.querySelector('#send-confirmation-dialog').click()&quot;)&#10;&#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;created&quot;)&#10;      end&#10;    end&#10;&#10;    context &quot;when on the index page&quot; do&#10;      before do&#10;        visit invoices_path&#10;&#10;        within(&quot;tbody tr:first-child&quot;) do&#10;          click_button &quot;Send&quot;&#10;        end&#10;      end&#10;&#10;      include_examples &quot;send invoice&quot;&#10;    end&#10;&#10;    context &quot;when on the show page&quot; do&#10;      before do&#10;        visit invoice_path(invoice)&#10;        sleep 60&#10;        click_button &quot;Send&quot;&#10;      end&#10;&#10;      include_examples &quot;send invoice&quot;&#10;    end&#10;  end&#10;&#10;  describe &quot;Deleting an invoice&quot;, js: true do&#10;    let!(:created_invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;    let!(:sent_invoice) { FactoryBot.create(:invoice, client: client, status: :sent) }&#10;&#10;    it &quot;allows deleting a created invoice with confirmation dialog&quot; do&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      # Wait for the delete confirmation dialog to appear&#10;      expect(page).to have_css(&quot;dialog[open]&quot;)&#10;      expect(page).to have_content(&quot;Are you sure you want to delete&quot;)&#10;      expect(page).to have_content(&quot;Invoice ##{created_invoice.id}&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Delete&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully deleted&quot;)&#10;      expect(page).not_to have_content(&quot;Invoice ##{created_invoice.id}&quot;)&#10;    end&#10;&#10;    it &quot;allows canceling the delete action&quot; do&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      # Wait for the delete confirmation dialog to appear&#10;      expect(page).to have_css(&quot;dialog[open]&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Cancel&quot;&#10;      end&#10;&#10;      # Dialog should close and invoice should still be there&#10;      expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;&#10;      expect(page).to have_link(created_invoice.id.to_s)&#10;    end&#10;&#10;    it &quot;prevents deleting sent invoices by not showing delete button&quot; do&#10;      visit invoices_path&#10;&#10;      row = find_link(sent_invoice.id.to_s).ancestor('tr')&#10;      expect(row).not_to have_button(&quot;Delete&quot;)&#10;    end&#10;&#10;    it &quot;frees up associated sessions when invoice is deleted&quot; do&#10;      # Create an invoice with specific sessions&#10;      session1 = client_sessions[0]&#10;      session2 = client_sessions[1]&#10;&#10;      created_invoice.client_sessions &lt;&lt; [ session1, session2 ]&#10;&#10;      expect(session1.reload.invoice_id).to eq(created_invoice.id)&#10;      expect(session2.reload.invoice_id).to eq(created_invoice.id)&#10;&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Delete&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully deleted&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Invoice status transitions&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;transitions from created to sent&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      click_button &quot;Send&quot;&#10;&#10;      within &quot;#send-confirmation-dialog&quot; do&#10;        expect(page).to have_content(&quot;Confirm Send Invoice&quot;)&#10;        expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;        click_button &quot;Send&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully sent&quot;)&#10;&#10;      expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;    end&#10;&#10;    it &quot;shows appropriate actions for each status&quot; do&#10;      # Created status&#10;      visit invoice_path(invoice)&#10;      expect(page).to have_link(&quot;Edit&quot;)&#10;      expect(page).to have_link(&quot;Send&quot;)&#10;&#10;      # Send the invoice&#10;      accept_confirm(&quot;Are you sure you want to send this invoice?&quot;) do&#10;        click_link &quot;Send&quot;&#10;      end&#10;&#10;      # Sent status&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;      expect(page).to have_link(&quot;Send&quot;) # Can resend&#10;&#10;      # Mark as paid (this would typically be done through a different interface)&#10;      invoice.update!(status: :paid)&#10;&#10;      # Paid status&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;      expect(page).not_to have_link(&quot;Send&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Empty state&quot; do&#10;    it &quot;shows appropriate message when no invoices exist&quot; do&#10;      Invoice.destroy_all&#10;&#10;      visit invoices_path&#10;&#10;      expect(page).to have_content(&quot;No invoices found&quot;)&#10;      expect(page).to have_content(&quot;Create your first invoice by selecting a client and generating an invoice for their sessions&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Invoice navigation&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client) }&#10;&#10;    it &quot;allows navigation from invoice index to individual invoice&quot; do&#10;      visit invoices_path&#10;&#10;      click_link &quot;#{invoice.id}&quot;&#10;&#10;      expect(current_path).to eq(invoice_path(invoice))&#10;      expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;    end&#10;&#10;    it &quot;allows navigation from client to new invoice&quot; do&#10;      visit client_path(client)&#10;&#10;      click_link &quot;Invoice&quot;, match: :first&#10;&#10;      expect(current_path).to eq(new_client_invoice_path(client))&#10;      expect(page).to have_content(&quot;New Invoice&quot;)&#10;    end&#10;  end&#10;end&#10;" />
              <option name="updatedContent" value="require 'rails_helper'&#10;&#10;RSpec.describe &quot;Invoices&quot;, type: :system do&#10;  include ActionText::SystemTestHelper&#10;&#10;  let!(:client) { FactoryBot.create(:client) }&#10;  let!(:payee) { FactoryBot.create(:payee) }&#10;  let!(:client_sessions) do&#10;    [&#10;      FactoryBot.create(:client_session, client: client, session_date: 1.week.ago, duration: 60),&#10;      FactoryBot.create(:client_session, client: client, session_date: 2.weeks.ago, duration: 90),&#10;      FactoryBot.create(:client_session, client: client, session_date: 3.weeks.ago, duration: 45)&#10;    ]&#10;  end&#10;&#10;  describe &quot;Invoice index page&quot; do&#10;    let!(:paid_invoice) { FactoryBot.create(:invoice, client: client, status: :paid) }&#10;    let!(:sent_invoice) { FactoryBot.create(:invoice, client: client, status: :sent) }&#10;    let!(:created_invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;displays all invoices with correct information&quot; do&#10;      visit invoices_path&#10;&#10;      expect(page).to have_content(&quot;Invoices&quot;)&#10;      expect(page).to have_link(created_invoice.id.to_s, href: invoice_path(created_invoice))&#10;      expect(page).to have_link(sent_invoice.id.to_s, href: invoice_path(sent_invoice))&#10;      expect(page).to have_link(paid_invoice.id.to_s, href: invoice_path(paid_invoice))&#10;      expect(page).to have_content(client.name)&#10;    end&#10;&#10;    it &quot;shows correct status badges for different invoice statuses&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.created&quot;, text: &quot;CREATED&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.sent&quot;, text: &quot;SENT&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.paid&quot;, text: &quot;PAID&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;shows delete button only for created invoices&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_button(&quot;Delete&quot;)&#10;        expect(page).to have_link(&quot;Edit&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).not_to have_button(&quot;Delete&quot;)&#10;        expect(page).not_to have_link(&quot;Edit&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).not_to have_button(&quot;Delete&quot;)&#10;        expect(page).not_to have_link(&quot;Edit&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;shows send button for created and sent invoices but not paid invoices&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_button(&quot;Send&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).to have_button(&quot;Send&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).not_to have_button(&quot;Send&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Creating a new invoice&quot; do&#10;    it &quot;allows creating an invoice with selected sessions&quot; do&#10;      visit new_client_invoice_path(client)&#10;&#10;      expect(page).to have_content(&quot;New Invoice for #{client.name}&quot;)&#10;&#10;      # Fill in invoice details&#10;      fill_in &quot;Date&quot;, with: Date.current.strftime(&quot;%Y-%m-%d&quot;)&#10;      select payee.name, from: &quot;Payee&quot;&#10;      fill_in_rich_textarea &quot;Text&quot;, with: &quot;Invoice for consulting services&quot;&#10;&#10;      # Select some sessions&#10;      uncheck &quot;session_#{client_sessions[2].id}&quot;&#10;&#10;      click_button &quot;Create Invoice&quot;&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully generated&quot;)&#10;&#10;      # Verify the invoice was created correctly&#10;      invoice = Invoice.last&#10;      expect(invoice.client).to eq(client)&#10;      expect(invoice.payee).to eq(payee)&#10;      expect(invoice.text.body.to_plain_text).to eq(&quot;Invoice for consulting services&quot;)&#10;      expect(invoice.client_sessions).to include(client_sessions[0], client_sessions[1])&#10;      expect(invoice.client_sessions).not_to include(client_sessions[2])&#10;    end&#10;&#10;    it &quot;prepopulates text field with relevant messages when creating new invoice&quot;, js: true do&#10;      # Create some messages for the client&#10;      message1 = FactoryBot.create(:message, :for_all_clients, text: &quot;General Message for all clients&quot;, created_at: 1.week.ago)&#10;      message2 = FactoryBot.create(:message, text: &quot;Specific Message for #{client.name}&quot;, created_at: 2.days.ago).apply_to_client(client)&#10;&#10;      visit new_client_invoice_path(client)&#10;&#10;      within(&quot;#invoice_text&quot;) do&#10;        expect(page).to have_content(&quot;General Message for all clients&quot;)&#10;        expect(page).to have_content(&quot;Specific Message for #{client.name}&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Viewing an invoice&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, payee: payee, text: &quot;Test invoice text&quot;) }&#10;&#10;    it &quot;displays invoice details correctly&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      within(&quot;div.invoice-info &gt; table &gt; tbody &gt; tr:nth-child(1)&quot;) do&#10;        expect(page).to have_content(&quot;Invoice Number&quot;)&#10;        expect(page).to have_content(invoice.id.to_s)&#10;      end&#10;&#10;      within(&quot;div.invoice-info &gt; table &gt; tbody &gt; tr:nth-child(2)&quot;) do&#10;        expect(page).to have_content(&quot;Date&quot;)&#10;        expect(page).to have_content(invoice.date.strftime('%d %b %Y'))&#10;      end&#10;&#10;      expect(page).to have_content(client.name)&#10;      expect(page).to have_content(payee.name)&#10;      expect(page).to have_content(&quot;Test invoice text&quot;)&#10;    end&#10;&#10;    it &quot;shows session details in the invoice&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      invoice.client_sessions.each do |session|&#10;        expect(page).to have_content(session.session_date.strftime('%d %b %Y'))&#10;        expect(page).to have_content(&quot;#{session.duration} minutes&quot;)&#10;        expect(page).to have_content(session.hourly_session_rate.format)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Editing an invoice&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;allows editing a created invoice&quot; do&#10;      visit edit_invoice_path(invoice)&#10;&#10;      expect(page).to have_content(&quot;Edit Invoice&quot;)&#10;&#10;      fill_in_rich_textarea &quot;Text&quot;, with: &quot;Updated invoice text&quot;&#10;      click_button &quot;Update Invoice&quot;&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully updated&quot;)&#10;      expect(page).to have_content(&quot;Updated invoice text&quot;)&#10;    end&#10;&#10;    it &quot;prevents editing sent invoices&quot; do&#10;      invoice.update!(status: :sent)&#10;&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;&#10;      # Try to access edit page directly&#10;      visit edit_invoice_path(invoice)&#10;      expect(page).to have_content(&quot;Cannot edit invoice that has been sent or paid&quot;)&#10;    end&#10;&#10;    it &quot;prevents editing paid invoices&quot; do&#10;      invoice.update!(status: :paid)&#10;&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;&#10;      # Try to access edit page directly&#10;      visit edit_invoice_path(invoice)&#10;      expect(page).to have_content(&quot;Cannot edit invoice that has been sent or paid&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Sending an invoice&quot;, js: true do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    shared_examples &quot;send invoice&quot; do&#10;      it &quot;allows sending an invoice with confirmation dialog&quot; do&#10;        # Wait for the send confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(page).to have_content(&quot;Confirm Send Invoice&quot;)&#10;        expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;&#10;        within(&quot;dialog#send-confirmation-dialog&quot;) do&#10;          click_button &quot;Send Invoice&quot;&#10;        end&#10;&#10;        expect(page).to have_content(&quot;Invoice was successfully sent&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling the send action&quot; do&#10;        within(&quot;dialog#send-confirmation-dialog&quot;) do&#10;          click_button &quot;Cancel&quot;&#10;        end&#10;&#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;created&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling by clicking outside the dialog&quot; do&#10;        # Wait for the send confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;&#10;        # Click outside the dialog (on the dialog backdrop)&#10;        page.execute_script(&quot;document.querySelector('#send-confirmation-dialog').click()&quot;)&#10;&#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;created&quot;)&#10;      end&#10;    end&#10;&#10;    context &quot;when on the index page&quot; do&#10;      before do&#10;        visit invoices_path&#10;&#10;        within(&quot;tbody tr:first-child&quot;) do&#10;          click_button &quot;Send&quot;&#10;        end&#10;      end&#10;&#10;      include_examples &quot;send invoice&quot;&#10;    end&#10;&#10;    context &quot;when on the show page&quot; do&#10;      before do&#10;        visit invoice_path(invoice)&#10;        sleep 60&#10;        click_button &quot;Send&quot;&#10;      end&#10;&#10;      include_examples &quot;send invoice&quot;&#10;    end&#10;  end&#10;&#10;  describe &quot;Marking an invoice as paid&quot;, js: true do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :sent) }&#10;&#10;    shared_examples &quot;mark invoice as paid&quot; do&#10;      it &quot;allows marking an invoice as paid with confirmation dialog&quot; do&#10;        # Wait for the mark paid confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#mark-paid-confirmation-dialog[open]&quot;)&#10;        expect(page).to have_content(&quot;Confirm Mark Invoice as Paid&quot;)&#10;        expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;&#10;        within(&quot;dialog#mark-paid-confirmation-dialog&quot;) do&#10;          click_button &quot;Mark as Paid&quot;&#10;        end&#10;&#10;        expect(page).to have_content(&quot;Invoice was successfully marked as paid&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;paid&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling the mark as paid action&quot; do&#10;        within(&quot;dialog#mark-paid-confirmation-dialog&quot;) do&#10;          click_button &quot;Cancel&quot;&#10;        end&#10;&#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling by clicking outside the dialog&quot; do&#10;        # Wait for the mark paid confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#mark-paid-confirmation-dialog[open]&quot;)&#10;        &#10;        # Click outside the dialog (on the dialog backdrop)&#10;        page.execute_script(&quot;document.querySelector('#mark-paid-confirmation-dialog').click()&quot;)&#10;        &#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;      end&#10;    end&#10;&#10;    context &quot;when on the index page&quot; do&#10;      before do&#10;        visit invoices_path&#10;&#10;        within(&quot;tbody tr:first-child&quot;) do&#10;          click_button &quot;Mark as Paid&quot;&#10;        end&#10;      end&#10;&#10;      include_examples &quot;mark invoice as paid&quot;&#10;    end&#10;&#10;    context &quot;when on the show page&quot; do&#10;      before do&#10;        visit invoice_path(invoice)&#10;&#10;        click_button &quot;Mark as Paid&quot;&#10;      end&#10;&#10;      include_examples &quot;mark invoice as paid&quot;&#10;    end&#10;  end&#10;&#10;  describe &quot;Deleting an invoice&quot;, js: true do&#10;    let!(:created_invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;    let!(:sent_invoice) { FactoryBot.create(:invoice, client: client, status: :sent) }&#10;&#10;    it &quot;allows deleting a created invoice with confirmation dialog&quot; do&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      # Wait for the delete confirmation dialog to appear&#10;      expect(page).to have_css(&quot;dialog[open]&quot;)&#10;      expect(page).to have_content(&quot;Are you sure you want to delete&quot;)&#10;      expect(page).to have_content(&quot;Invoice ##{created_invoice.id}&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Delete&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully deleted&quot;)&#10;      expect(page).not_to have_content(&quot;Invoice ##{created_invoice.id}&quot;)&#10;    end&#10;&#10;    it &quot;allows canceling the delete action&quot; do&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      # Wait for the delete confirmation dialog to appear&#10;      expect(page).to have_css(&quot;dialog[open]&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Cancel&quot;&#10;      end&#10;&#10;      # Dialog should close and invoice should still be there&#10;      expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;&#10;      expect(page).to have_link(created_invoice.id.to_s)&#10;    end&#10;&#10;    it &quot;prevents deleting sent invoices by not showing delete button&quot; do&#10;      visit invoices_path&#10;&#10;      row = find_link(sent_invoice.id.to_s).ancestor('tr')&#10;      expect(row).not_to have_button(&quot;Delete&quot;)&#10;    end&#10;&#10;    it &quot;frees up associated sessions when invoice is deleted&quot; do&#10;      # Create an invoice with specific sessions&#10;      session1 = client_sessions[0]&#10;      session2 = client_sessions[1]&#10;&#10;      created_invoice.client_sessions &lt;&lt; [ session1, session2 ]&#10;&#10;      expect(session1.reload.invoice_id).to eq(created_invoice.id)&#10;      expect(session2.reload.invoice_id).to eq(created_invoice.id)&#10;&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Delete&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully deleted&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Invoice status transitions&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;transitions from created to sent&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      click_button &quot;Send&quot;&#10;&#10;      within &quot;#send-confirmation-dialog&quot; do&#10;        expect(page).to have_content(&quot;Confirm Send Invoice&quot;)&#10;        expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;        click_button &quot;Send&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully sent&quot;)&#10;&#10;      expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;    end&#10;&#10;    it &quot;shows appropriate actions for each status&quot; do&#10;      # Created status&#10;      visit invoice_path(invoice)&#10;      expect(page).to have_link(&quot;Edit&quot;)&#10;      expect(page).to have_link(&quot;Send&quot;)&#10;&#10;      # Send the invoice&#10;      accept_confirm(&quot;Are you sure you want to send this invoice?&quot;) do&#10;        click_link &quot;Send&quot;&#10;      end&#10;&#10;      # Sent status&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;      expect(page).to have_link(&quot;Send&quot;) # Can resend&#10;&#10;      # Mark as paid (this would typically be done through a different interface)&#10;      invoice.update!(status: :paid)&#10;&#10;      # Paid status&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;      expect(page).not_to have_link(&quot;Send&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Empty state&quot; do&#10;    it &quot;shows appropriate message when no invoices exist&quot; do&#10;      Invoice.destroy_all&#10;&#10;      visit invoices_path&#10;&#10;      expect(page).to have_content(&quot;No invoices found&quot;)&#10;      expect(page).to have_content(&quot;Create your first invoice by selecting a client and generating an invoice for their sessions&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Invoice navigation&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client) }&#10;&#10;    it &quot;allows navigation from invoice index to individual invoice&quot; do&#10;      visit invoices_path&#10;&#10;      click_link &quot;#{invoice.id}&quot;&#10;&#10;      expect(current_path).to eq(invoice_path(invoice))&#10;      expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;    end&#10;&#10;    it &quot;allows navigation from client to new invoice&quot; do&#10;      visit client_path(client)&#10;&#10;      click_link &quot;Invoice&quot;, match: :first&#10;&#10;      expect(current_path).to eq(new_client_invoice_path(client))&#10;      expect(page).to have_content(&quot;New Invoice&quot;)&#10;    end&#10;  end&#10;end&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>