<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/assets/stylesheets/dialogues.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/assets/stylesheets/dialogues.css" />
              <option name="updatedContent" value="/* Shared dialog styles */&#10;dialog {&#10;  padding: 0;&#10;  border: none;&#10;  border-radius: 8px;&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;  max-width: 450px;&#10;  width: 100%;&#10;}&#10;&#10;dialog::backdrop {&#10;  background-color: rgba(0, 0, 0, 0.5);&#10;}&#10;&#10;.dialog-content {&#10;  padding: 20px;&#10;}&#10;&#10;.dialog-buttons {&#10;  display: flex;&#10;  justify-content: flex-end;&#10;  gap: 10px;&#10;  margin-top: 20px;&#10;}&#10;&#10;.dialog-form {&#10;  display: inline;&#10;}&#10;&#10;/* Bold styling for highlighted text in dialogs */&#10;[id$=&quot;-to-delete&quot;],&#10;[id$=&quot;-to-send&quot;],&#10;[id$=&quot;-to-mark-paid&quot;] {&#10;  font-weight: bold;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/controllers/invoices_controller.rb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/controllers/invoices_controller.rb" />
              <option name="originalContent" value="class InvoicesController &lt; ApplicationController&#10;  before_action :set_client, only: [ :new ]&#10;  before_action :set_invoice_and_client, only: [ :show, :edit, :update, :send_invoice, :destroy ]&#10;  before_action :set_available_payees, only: [ :new, :edit, :create, :update ]&#10;&#10;  def index&#10;    @invoices = Invoice.all.order(created_at: :desc)&#10;  end&#10;&#10;  def show&#10;    # @invoice is set by before_action&#10;  end&#10;&#10;  def new&#10;    @invoice = Invoice.new(client: @client)&#10;    # If client has a default payee, set it on the invoice&#10;    @invoice.payee = @client.paid_by if @client.paid_by.present?&#10;    @available_sessions = @client.client_sessions.where(invoice_id: nil).order(session_date: :desc)&#10;  end&#10;&#10;  def create&#10;    @invoice = Invoice.new(invoice_params)&#10;&#10;    if @invoice.save&#10;      redirect_to @invoice, notice: &quot;Invoice was successfully generated.&quot;&#10;    else&#10;      @client = Client.find(invoice_params[:client_id])&#10;      @uninvoiced_sessions = @client.client_sessions.where(invoice_id: nil).order(session_date: :desc)&#10;      render :new, status: :unprocessable_entity&#10;    end&#10;  end&#10;&#10;  def edit&#10;    # Redirect if invoice is not editable&#10;    unless @invoice.created?&#10;      redirect_to invoice_path(@invoice), alert: &quot;Cannot edit invoice that has been sent or paid.&quot;&#10;      return&#10;    end&#10;&#10;    # Get available sessions (uninvoiced or belonging to this invoice)&#10;    @available_sessions = @client.client_sessions.where(&quot;invoice_id IS NULL OR invoice_id = ?&quot;, @invoice.id).order(session_date: :asc)&#10;  end&#10;&#10;  def update&#10;    @invoice = Invoice.find(params[:id])&#10;    @client = @invoice.client&#10;&#10;    if @invoice.update(invoice_params)&#10;      if request.referrer == invoices_url&#10;        # Determine the appropriate notice message based on what was updated&#10;        notice_message = if invoice_params[:status] == &quot;paid&quot;&#10;                          &quot;Invoice was successfully marked as paid.&quot;&#10;                        else&#10;                          &quot;Invoice was successfully updated.&quot;&#10;                        end&#10;&#10;        render turbo_stream: [&#10;          turbo_stream.replace(@invoice, partial: &quot;invoices/invoices_row&quot;, locals: { invoice: @invoice, button_size: &quot;button-small&quot; }),&#10;          turbo_stream.replace(&quot;notice&quot;, partial: &quot;layouts/notice&quot;, locals: { notice: notice_message })&#10;        ]&#10;      else&#10;        redirect_to invoice_path(@invoice), notice: &quot;Invoice was successfully updated.&quot;&#10;      end&#10;    else&#10;      @available_sessions = @client.client_sessions&#10;                                  .where(&quot;invoice_id IS NULL OR invoice_id = ?&quot;, @invoice.id)&#10;                                  .order(session_date: :desc)&#10;      render :edit, status: :unprocessable_entity&#10;    end&#10;  end&#10;&#10;  def send_invoice&#10;    # Check if PDF is already attached&#10;    unless @invoice.pdf.attached?&#10;      # Generate PDF using Grover&#10;      pdf_content = generate_invoice_pdf&#10;&#10;      # Attach the PDF to the invoice&#10;      @invoice.pdf.attach(&#10;        io: StringIO.new(pdf_content),&#10;        filename: &quot;invoice_#{@invoice.id}.pdf&quot;,&#10;        content_type: &quot;application/pdf&quot;&#10;      )&#10;    end&#10;&#10;    # Send the email&#10;    InvoiceMailer.invoice_email(@invoice).deliver_now&#10;&#10;    # Mark the invoice as sent&#10;    @invoice.sent! unless @invoice.sent? || @invoice.paid?&#10;&#10;    redirect_to @invoice, notice: &quot;Invoice was successfully sent.&quot;&#10;  end&#10;&#10;  def destroy&#10;    # Only allow deletion if invoice can be deleted&#10;    if @invoice.destroy&#10;      # Delete the invoice&#10;      redirect_to invoices_path, notice: &quot;Invoice was successfully deleted.&quot;&#10;    else&#10;      redirect_to invoices_path, alert: &quot;Cannot delete invoice that has been sent or paid.&quot;&#10;    end&#10;  end&#10;&#10;  private&#10;&#10;  def set_client&#10;    @client = Client.find(params[:client_id])&#10;  end&#10;&#10;  def set_invoice_and_client&#10;    @invoice = Invoice.find(params[:id])&#10;    @client = @invoice.client&#10;  end&#10;&#10;  def invoice_params&#10;    params.require(:invoice).permit(:date, :status, :amount, :client_id, :payee_id, :text, client_session_ids: [])&#10;  end&#10;&#10;  def generate_invoice_pdf&#10;    # Get the HTML of the invoice show page&#10;    html = render_to_string template: &quot;invoices/show&quot;, layout: &quot;pdf&quot;, locals: { invoice: @invoice }&#10;&#10;    # Convert to PDF using Ferrum_pdf&#10;    FerrumPdf.render_pdf(html: html)&#10;  end&#10;&#10;  def set_available_payees&#10;    @available_payees = Payee.where(active: true).order(:name)&#10;  end&#10;end&#10;" />
              <option name="updatedContent" value="class InvoicesController &lt; ApplicationController&#10;  before_action :set_client, only: [ :new ]&#10;  before_action :set_invoice_and_client, only: [ :show, :edit, :update, :send_invoice, :destroy ]&#10;  before_action :set_available_payees, only: [ :new, :edit, :create, :update ]&#10;&#10;  def index&#10;    @invoices = Invoice.all.order(created_at: :desc)&#10;  end&#10;&#10;  def show&#10;    # @invoice is set by before_action&#10;  end&#10;&#10;  def new&#10;    @invoice = Invoice.new(client: @client)&#10;    # If client has a default payee, set it on the invoice&#10;    @invoice.payee = @client.paid_by if @client.paid_by.present?&#10;    @available_sessions = @client.client_sessions.where(invoice_id: nil).order(session_date: :desc)&#10;  end&#10;&#10;  def create&#10;    @invoice = Invoice.new(invoice_params)&#10;&#10;    if @invoice.save&#10;      redirect_to @invoice, notice: &quot;Invoice was successfully generated.&quot;&#10;    else&#10;      @client = Client.find(invoice_params[:client_id])&#10;      @uninvoiced_sessions = @client.client_sessions.where(invoice_id: nil).order(session_date: :desc)&#10;      render :new, status: :unprocessable_entity&#10;    end&#10;  end&#10;&#10;  def edit&#10;    # Redirect if invoice is not editable&#10;    unless @invoice.created?&#10;      redirect_to invoice_path(@invoice), alert: &quot;Cannot edit invoice that has been sent or paid.&quot;&#10;      return&#10;    end&#10;&#10;    # Get available sessions (uninvoiced or belonging to this invoice)&#10;    @available_sessions = @client.client_sessions.where(&quot;invoice_id IS NULL OR invoice_id = ?&quot;, @invoice.id).order(session_date: :asc)&#10;  end&#10;&#10;  def update&#10;    @invoice = Invoice.find(params[:id])&#10;    @client = @invoice.client&#10;&#10;    if @invoice.update(invoice_params)&#10;      if request.referrer == invoices_url&#10;        # Determine the appropriate notice message based on what was updated&#10;        notice_message = if invoice_params[:status] == &quot;paid&quot;&#10;                          &quot;Invoice was successfully marked as paid.&quot;&#10;                        else&#10;                          &quot;Invoice was successfully updated.&quot;&#10;                        end&#10;&#10;        render turbo_stream: [&#10;          turbo_stream.replace(@invoice, partial: &quot;invoices/invoices_row&quot;, locals: { invoice: @invoice, button_size: &quot;button-small&quot; }),&#10;          turbo_stream.replace(&quot;notice&quot;, partial: &quot;layouts/notice&quot;, locals: { notice: notice_message })&#10;        ]&#10;      else&#10;        redirect_to invoice_path(@invoice), notice: &quot;Invoice was successfully updated.&quot;&#10;      end&#10;    else&#10;      @available_sessions = @client.client_sessions&#10;                                  .where(&quot;invoice_id IS NULL OR invoice_id = ?&quot;, @invoice.id)&#10;                                  .order(session_date: :desc)&#10;      render :edit, status: :unprocessable_entity&#10;    end&#10;  end&#10;&#10;  def send_invoice&#10;    # Check if PDF is already attached&#10;    unless @invoice.pdf.attached?&#10;      # Generate PDF using Grover&#10;      pdf_content = generate_invoice_pdf&#10;&#10;      # Attach the PDF to the invoice&#10;      @invoice.pdf.attach(&#10;        io: StringIO.new(pdf_content),&#10;        filename: &quot;invoice_#{@invoice.id}.pdf&quot;,&#10;        content_type: &quot;application/pdf&quot;&#10;      )&#10;    end&#10;&#10;    # Send the email&#10;    InvoiceMailer.invoice_email(@invoice).deliver_now&#10;&#10;    # Mark the invoice as sent&#10;    @invoice.sent! unless @invoice.sent? || @invoice.paid?&#10;&#10;    redirect_to @invoice, notice: &quot;Invoice was successfully sent.&quot;&#10;  end&#10;&#10;  def destroy&#10;    # Only allow deletion if invoice can be deleted&#10;    if @invoice.destroy&#10;      # Delete the invoice&#10;      redirect_to invoices_path, notice: &quot;Invoice was successfully deleted.&quot;&#10;    else&#10;      redirect_to invoices_path, alert: &quot;Cannot delete invoice that has been sent or paid.&quot;&#10;    end&#10;  end&#10;&#10;  private&#10;&#10;  def set_client&#10;    @client = Client.find(params[:client_id])&#10;  end&#10;&#10;  def set_invoice_and_client&#10;    @invoice = Invoice.find(params[:id])&#10;    @client = @invoice.client&#10;  end&#10;&#10;  def invoice_params&#10;    params.require(:invoice).permit(:date, :status, :amount, :client_id, :payee_id, :text, client_session_ids: [])&#10;  end&#10;&#10;  def generate_invoice_pdf&#10;    # Get the HTML of the invoice show page&#10;    html = render_to_string template: &quot;invoices/show&quot;, layout: &quot;pdf&quot;, locals: { invoice: @invoice }&#10;&#10;    # Convert to PDF using Ferrum_pdf&#10;    FerrumPdf.render_pdf(html: html)&#10;  end&#10;&#10;  def set_available_payees&#10;    @available_payees = Payee.where(active: true).order(:name)&#10;  end&#10;end" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/client_sessions/_form.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/client_sessions/_form.html.erb" />
              <option name="originalContent" value="&lt;%= form_with(model: client_session, class: &quot;pure-form pure-form-stacked&quot;, data: { controller: &quot;validation client-rate&quot; }) do |form| %&gt;&#10;  &lt;%= render 'shared/error_explanation', model: client_session %&gt;&#10;&#10;  &lt;fieldset&gt;&#10;    &lt;legend&gt;Session Information&lt;/legend&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1&quot;&gt;&#10;        &lt;%= form.label :client_id, &quot;Client&quot; %&gt;&#10;        &lt;%= form.collection_select :client_id, Client.where(active: true), :id, :name,&#10;            { prompt: &quot;Select a client&quot; },&#10;            { required: true, class: &quot;pure-input-1&quot;,&#10;              data: {&#10;                action: &quot;invalid-&gt;validation#markFieldAsInvalid change-&gt;client-rate#fetchClientRate&quot;,&#10;                client_rate_target: &quot;clientSelect&quot;&#10;              }&#10;            }&#10;        %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :hourly_session_rate_pence, &quot;Rate (£ per hour)&quot; %&gt;&#10;        &lt;%= form.text_field :hourly_session_rate_pence,&#10;            readonly: true,&#10;            class: &quot;pure-input-1&quot;,&#10;            data: { client_rate_target: &quot;rateField&quot; },&#10;            value: number_to_currency(client_session.hourly_session_rate&amp;.to_f || 0, unit: &quot;£&quot;)&#10;        %&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :session_date, &quot;Session Date&quot; %&gt;&#10;        &lt;%= form.date_field :session_date, required: true, class: &quot;pure-input-1&quot;, data: { action: &quot;invalid-&gt;validation#markFieldAsInvalid&quot; } %&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :duration, &quot;Duration (minutes)&quot; %&gt;&#10;        &lt;%= form.number_field :duration, required: true, min: 1, class: &quot;pure-input-1&quot;, data: { action: &quot;invalid-&gt;validation#markFieldAsInvalid&quot; } %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1&quot;&gt;&#10;        &lt;%= form.label :description, &quot;Session Description&quot; %&gt;&#10;        &lt;%= form.text_area :description, class: &quot;pure-input-1&quot;, rows: 3, placeholder: &quot;Enter session details or notes here&quot; %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/fieldset&gt;&#10;&#10;  &lt;div class=&quot;actions&quot;&gt;&#10;    &lt;%= form.submit class: &quot;pure-button pure-button-primary&quot;, data: { action: &quot;click-&gt;validation#resetValidationErrorText&quot; }  %&gt;&#10;  &lt;/div&gt;&#10;&lt;% end %&gt;&#10;" />
              <option name="updatedContent" value="&lt;%= form_with(model: client_session, class: &quot;pure-form pure-form-stacked&quot;, data: { controller: &quot;validation client-rate&quot; }) do |form| %&gt;&#10;  &lt;%= render 'shared/error_explanation', model: client_session %&gt;&#10;&#10;  &lt;fieldset&gt;&#10;    &lt;legend&gt;Session Information&lt;/legend&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1&quot;&gt;&#10;        &lt;%= form.label :client_id, &quot;Client&quot; %&gt;&#10;        &lt;%= form.collection_select :client_id, Client.where(active: true), :id, :name,&#10;            { prompt: &quot;Select a client&quot; },&#10;            { required: true, class: &quot;pure-input-1&quot;,&#10;              data: {&#10;                action: &quot;invalid-&gt;validation#markFieldAsInvalid change-&gt;client-rate#fetchClientRate&quot;,&#10;                client_rate_target: &quot;clientSelect&quot;&#10;              }&#10;            }&#10;        %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :hourly_session_rate_pence, &quot;Rate (£ per hour)&quot; %&gt;&#10;        &lt;%= form.text_field :hourly_session_rate_pence,&#10;            readonly: true,&#10;            class: &quot;pure-input-1&quot;,&#10;            data: { client_rate_target: &quot;rateField&quot; },&#10;            value: number_to_currency(client_session.hourly_session_rate&amp;.to_f || 0, unit: &quot;£&quot;)&#10;        %&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :session_date, &quot;Session Date&quot; %&gt;&#10;        &lt;%= form.date_field :session_date, required: true, class: &quot;pure-input-1&quot;, data: { action: &quot;invalid-&gt;validation#markFieldAsInvalid&quot; } %&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div class=&quot;pure-u-1 pure-u-md-1-3&quot;&gt;&#10;        &lt;%= form.label :duration, &quot;Duration (minutes)&quot; %&gt;&#10;        &lt;%= form.number_field :duration, required: true, min: 1, class: &quot;pure-input-1&quot;, data: { action: &quot;invalid-&gt;validation#markFieldAsInvalid&quot; } %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;pure-g&quot;&gt;&#10;      &lt;div class=&quot;pure-u-1&quot;&gt;&#10;        &lt;%= form.label :description, &quot;Session Description&quot; %&gt;&#10;        &lt;%= form.text_area :description, class: &quot;pure-input-1&quot;, rows: 3, placeholder: &quot;Enter session details or notes here&quot; %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/fieldset&gt;&#10;&#10;  &lt;div class=&quot;form-buttons&quot;&gt;&#10;    &lt;%= form.submit class: &quot;pure-button pure-button-primary&quot;, data: { action: &quot;click-&gt;validation#resetValidationErrorText&quot; }  %&gt;&#10;    &lt;%= link_to &quot;Cancel&quot;, client_sessions_path, class: &quot;pure-button&quot; %&gt;&#10;  &lt;/div&gt;&#10;&lt;% end %&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/invoices/_buttons.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/invoices/_buttons.html.erb" />
              <option name="originalContent" value="&lt;% if invoice.created? %&gt;&#10;  &lt;%= render partial: 'shared/delete_confirmation', locals: {&#10;    entity: invoice,&#10;    button_size: button_size&#10;  } %&gt;&#10;  &lt;%= link_to edit_invoice_path(invoice), class: &quot;pure-button #{button_size}&quot; do %&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;edit&lt;/span&gt; Edit&#10;  &lt;% end %&gt;&#10;&lt;% end %&gt;&#10;&#10;&lt;% unless invoice.paid? %&gt;&#10;  &lt;div data-controller=&quot;send-confirmation&quot; display=&quot;inline&quot;&gt;&#10;    &lt;button class=&quot;pure-button pure-button-primary send-invoice-btn &lt;%=button_size%&gt;&quot;&#10;            data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;            data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;            data-action=&quot;click-&gt;send-confirmation#open&quot;&gt;&#10;      &lt;span class=&quot;material-symbols-outlined&quot;&gt;mail&lt;/span&gt; Send&#10;    &lt;/button&gt;&#10;  &lt;/div&gt;&#10;  &lt;%= render partial: 'shared/send_confirmation_dialog' %&gt;&#10;&#10;  &lt;button class=&quot;pure-button button-success mark-paid-btn &lt;%=button_size%&gt;&quot;&#10;          data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;          data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;          data-controller=&quot;mark-paid&quot;&#10;          data-action=&quot;click-&gt;mark-paid#open&quot;&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;check&lt;/span&gt; Mark as Paid&#10;  &lt;/button&gt;&#10;&lt;% end %&gt;" />
              <option name="updatedContent" value="&lt;% if invoice.created? %&gt;&#10;  &lt;%= render partial: 'shared/delete_confirmation', locals: {&#10;    entity: invoice,&#10;    button_size: button_size&#10;  } %&gt;&#10;  &lt;%= link_to edit_invoice_path(invoice), class: &quot;pure-button #{button_size}&quot; do %&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;edit&lt;/span&gt; Edit&#10;  &lt;% end %&gt;&#10;&lt;% end %&gt;&#10;&#10;&lt;% unless invoice.paid? %&gt;&#10;  &lt;div data-controller=&quot;send-confirmation&quot; style=&quot;display: inline&quot;&gt;&#10;    &lt;button class=&quot;pure-button pure-button-primary send-invoice-btn &lt;%=button_size%&gt;&quot;&#10;            data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;            data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;            data-action=&quot;click-&gt;send-confirmation#open&quot;&gt;&#10;      &lt;span class=&quot;material-symbols-outlined&quot;&gt;mail&lt;/span&gt; Send&#10;    &lt;/button&gt;&#10;  &lt;/div&gt;&#10;&#10;  &lt;button class=&quot;pure-button button-success mark-paid-btn &lt;%=button_size%&gt;&quot;&#10;          data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;          data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;          data-controller=&quot;mark-paid&quot;&#10;          data-action=&quot;click-&gt;mark-paid#open&quot;&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;check&lt;/span&gt; Mark as Paid&#10;  &lt;/button&gt;&#10;&lt;% end %&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/invoices/show.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/invoices/show.html.erb" />
              <option name="originalContent" value="&lt;% content_for :title, &quot;Invoice #{@invoice.id}&quot; %&gt;&#10;&#10;&lt;div class=&quot;show-buttons&quot;&gt;&#10;  &lt;%= render partial: &quot;buttons&quot;, locals: { invoice: @invoice, button_size:&quot;&quot; } %&gt;&#10;  &lt;%= link_to &quot;#&quot;, onclick: &quot;window.print(); return false;&quot;, class: &quot;pure-button pure-button-primary&quot; do %&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;print&lt;/span&gt; Print&#10;  &lt;% end %&gt;&#10;  &lt;%= link_to invoices_path, class: &quot;pure-button&quot; do %&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;arrow_back&lt;/span&gt; Back to Invoices&#10;  &lt;% end %&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;invoice-container&quot;&gt;&#10;  &lt;div class=&quot;invoice-content&quot;&gt;&#10;    &lt;!-- Header Section --&gt;&#10;    &lt;div class=&quot;invoice-header&quot;&gt;&#10;      &lt;div class=&quot;business-info&quot;&gt;&#10;        &lt;h2&gt;&lt;%= Rails.application.credentials.org_details[:name] %&gt;&lt;/h2&gt;&#10;        &lt;address&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:address1] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:address2] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:town] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:postcode] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:email] %&gt;&#10;        &lt;/address&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div class=&quot;invoice-title&quot;&gt;&#10;        &lt;h1&gt;INVOICE&lt;/h1&gt;&#10;        &lt;!-- Status Box --&gt;&#10;        &lt;% if @invoice.sent? || @invoice.paid? %&gt;&#10;          &lt;div class=&quot;invoice-status &lt;%= @invoice.status %&gt;&quot;&gt;&#10;            &lt;%= @invoice.status==&quot;sent&quot; ? &quot;Copy&quot; : @invoice.status.capitalize %&gt;&#10;          &lt;/div&gt;&#10;        &lt;% end %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Invoice Details Section --&gt;&#10;    &lt;div class=&quot;invoice-details&quot;&gt;&#10;      &lt;div class=&quot;client-info&quot;&gt;&#10;        &lt;h3&gt;Bill To:&lt;/h3&gt;&#10;        &lt;% bill_to = @invoice.payee || @invoice.client %&gt;&#10;        &lt;div class=&quot;client-name&quot;&gt;&lt;%= bill_to.name %&gt;&lt;/div&gt;&#10;        &lt;address&gt;&#10;          &lt;%= bill_to.address1 %&gt;&lt;br&gt;&#10;          &lt;% if bill_to.address2.present? %&gt;&#10;            &lt;%= bill_to.address2 %&gt;&lt;br&gt;&#10;          &lt;% end %&gt;&#10;          &lt;%= bill_to.town %&gt;&lt;br&gt;&#10;          &lt;%= bill_to.postcode %&gt;&#10;        &lt;/address&gt;&#10;&#10;        &lt;% if @invoice.payee.present? %&gt;&#10;          &lt;div class=&quot;services-for&quot;&gt;&#10;            &lt;h4&gt;Services For:&lt;/h4&gt;&#10;            &lt;div&gt;&lt;%= @invoice.client.name %&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;% end %&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div class=&quot;invoice-info&quot;&gt;&#10;        &lt;table&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt;Invoice Number:&lt;/th&gt;&#10;            &lt;td class=&quot;text-right&quot;&gt;&lt;%= @invoice.id %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt; Date:&lt;/th&gt;&#10;            &lt;td class=&quot;text-right&quot;&gt;&lt;%= @invoice.date.strftime('%d %b %Y') %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Sessions Table --&gt;&#10;    &lt;div class=&quot;invoice-items&quot;&gt;&#10;      &lt;table class=&quot;pure-table pure-table-bordered&quot;&gt;&#10;        &lt;thead&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt;Date&lt;/th&gt;&#10;            &lt;th&gt;Description&lt;/th&gt;&#10;            &lt;th&gt;Duration&lt;/th&gt;&#10;            &lt;th&gt;Rate&lt;/th&gt;&#10;            &lt;th class=&quot;text-right&quot;&gt;Amount&lt;/th&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;          &lt;% @invoice.client_sessions.order(session_date: :asc).each do |session| %&gt;&#10;            &lt;tr&gt;&#10;              &lt;td&gt;&lt;%= session.session_date.strftime('%d %b %Y') %&gt;&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.description %&gt;&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.duration %&gt; minutes&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.hourly_session_rate.format %&gt;&lt;/td&gt;&#10;              &lt;td class=&quot;text-right&quot;&gt;&lt;%= session.fee.format %&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;          &lt;% end %&gt;&#10;        &lt;/tbody&gt;&#10;        &lt;tfoot&gt;&#10;          &lt;tr&gt;&#10;            &lt;td colspan=&quot;4&quot; class=&quot;total-label&quot;&gt;Total Amount:&lt;/td&gt;&#10;            &lt;td class=&quot;total-amount text-right&quot;&gt;&lt;%= @invoice.amount.format %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/tfoot&gt;&#10;      &lt;/table&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Invoice Text Section --&gt;&#10;    &lt;% if @invoice.text.present? %&gt;&#10;      &lt;div class=&quot;invoice-text&quot;&gt;&#10;        &lt;h3&gt;Additional Information&lt;/h3&gt;&#10;        &lt;div class=&quot;rich-text-content&quot;&gt;&#10;          &lt;%= @invoice.text %&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;% end %&gt;&#10;&#10;    &lt;!-- Payment Details --&gt;&#10;    &lt;div class=&quot;payment-details&quot;&gt;&#10;      &lt;h3&gt;Payment Details&lt;/h3&gt;&#10;      &lt;p&gt;&#10;        Please make payment to:&lt;br&gt;&#10;        Bank: &lt;%= Rails.application.credentials.payment_details[:bank] || &quot;Bank plc&quot; %&gt;&lt;br&gt;&#10;        Account Name: &lt;%= Rails.application.credentials.payment_details[:account_name] || &quot;Katy's Account&quot; %&gt;&lt;br&gt;&#10;        Account Number: &lt;%= Rails.application.credentials.payment_details[:account_number] || &quot;012345678&quot; %&gt;&lt;br&gt;&#10;        Sort Code: &lt;%= Rails.application.credentials.payment_details[:sort_code] || &quot;00-00-00&quot; %&gt;&lt;br&gt;&#10;        Reference: INV-&lt;%= @invoice.id %&gt;&#10;      &lt;/p&gt;&#10;      &#10;      &lt;p class=&quot;payment-terms&quot;&gt;&#10;        Payment Terms: Due within 30 days of issue.&lt;br&gt;&#10;        Please ensure all payments include the invoice reference.&#10;      &lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Thank You Note --&gt;&#10;    &lt;div class=&quot;thank-you&quot;&gt;&#10;      &lt;p&gt;Thank you for your business!&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;  @media print {&#10;    /* Hide everything by default */&#10;    body * {&#10;      visibility: hidden !important;&#10;    }&#10;&#10;    /* Make the invoice container and all its children visible */&#10;    .invoice-container,&#10;    .invoice-container * {&#10;      visibility: visible !important;&#10;    }&#10;&#10;    /* Style the invoice container to be the main content on the printed page */&#10;    .invoice-container {&#10;      position: absolute !important;&#10;      left: 0 !important;&#10;      top: 0 !important;&#10;      width: 100% !important;&#10;      min-height: 100% !important; /* Ensure it tries to fill height */&#10;      margin: 0 !important;&#10;      padding: 20px !important; /* Apply padding for the content within the container */&#10;      border: none !important;&#10;      box-shadow: none !important; /* Remove screen shadow */&#10;      background: white !important; /* Ensure container background is white */&#10;    }&#10;&#10;    /* If .invoice-content is inside .invoice-container, its padding might need adjustment.&#10;       The screen style for .invoice-content has padding: 20px.&#10;       If .invoice-container has padding: 20px for print, and .invoice-content also has padding,&#10;       it could be too much. Let's ensure .invoice-content's own padding is reset if needed,&#10;       relying on .invoice-container's padding.&#10;    */&#10;    .invoice-content {&#10;      padding: 0 !important; /* Reset padding if .invoice-container provides it */&#10;    }&#10;&#10;    body {&#10;      background: white !important; /* Ensure body background is white */&#10;    }&#10;    &#10;    @page {&#10;      margin: 0.5cm; /* Define page margins */&#10;    }&#10;  }&#10;  &#10;  /* Regular styles */&#10;  .invoice-container {&#10;    max-width: 800px;&#10;    margin: 20px auto;&#10;    background: white;&#10;    padding: 20px;&#10;    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);&#10;  }&#10;  &#10;  .invoice-content {&#10;    padding: 20px;&#10;  }&#10;  &#10;  .invoice-header {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    margin-bottom: 40px;&#10;    border-bottom: 2px solid #eee;&#10;    padding-bottom: 20px;&#10;  }&#10;  &#10;  .business-info {&#10;    flex: 1;&#10;  }&#10;  &#10;  .business-info h2 {&#10;    color: #333;&#10;    margin-bottom: 10px;&#10;  }&#10;  &#10;  .invoice-title {&#10;    text-align: right;&#10;  }&#10;  &#10;  .invoice-title h1 {&#10;    font-size: 32px;&#10;    color: #333;&#10;    margin-bottom: 5px;&#10;  }&#10;  &#10;  .invoice-status {&#10;    font-weight: bold;&#10;    padding: 5px 10px;&#10;    border-radius: 4px;&#10;    display: inline-block;&#10;  }&#10;  &#10;  .invoice-status.paid {&#10;    background-color: #5cb85c;&#10;    color: white;&#10;  }&#10;  &#10;  .invoice-status.sent {&#10;    background-color: #f0ad4e;&#10;    color: white;&#10;  }&#10;  &#10;  .invoice-details {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    margin-bottom: 30px;&#10;  }&#10;  &#10;  .client-info, .invoice-info {&#10;    flex: 1;&#10;  }&#10;  &#10;  .client-name {&#10;    font-weight: bold;&#10;    margin-bottom: 5px;&#10;  }&#10;  &#10;  .invoice-info table {&#10;    width: 100%;&#10;  }&#10;  &#10;  .invoice-info th {&#10;    text-align: left;&#10;    padding-right: 15px;&#10;    font-weight: normal;&#10;    color: #666;&#10;  }&#10;  &#10;  .invoice-items {&#10;    margin-bottom: 30px;&#10;  }&#10;  &#10;  .invoice-items table {&#10;    width: 100%;&#10;    border-collapse: collapse;&#10;  }&#10;  &#10;  .text-right {&#10;    text-align: right;&#10;  }&#10;  &#10;  .total-label {&#10;    text-align: right;&#10;    font-weight: bold;&#10;  }&#10;  &#10;  .total-amount {&#10;    font-weight: bold;&#10;    font-size: 1.1em;&#10;  }&#10;  &#10;  .payment-details {&#10;    margin-bottom: 30px;&#10;    padding: 15px;&#10;    background-color: #f9f9f9;&#10;    border-radius: 4px;&#10;  }&#10;  &#10;  .payment-terms {&#10;    margin-top: 15px;&#10;    font-style: italic;&#10;    color: #666;&#10;  }&#10;  &#10;  .thank-you {&#10;    text-align: center;&#10;    font-weight: bold;&#10;    color: #333;&#10;    padding: 20px 0;&#10;    font-size: 1.2em;&#10;  }&#10;  &#10;  address {&#10;    font-style: normal;&#10;    line-height: 1.5;&#10;    color: #555;&#10;  }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;% content_for :title, &quot;Invoice #{@invoice.id}&quot; %&gt;&#10;&#10;&lt;div class=&quot;show-buttons&quot;&gt;&#10;  &lt;%= render partial: &quot;buttons&quot;, locals: { invoice: @invoice, button_size:&quot;&quot; } %&gt;&#10;  &lt;%= link_to &quot;#&quot;, onclick: &quot;window.print(); return false;&quot;, class: &quot;pure-button pure-button-primary&quot; do %&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;print&lt;/span&gt; Print&#10;  &lt;% end %&gt;&#10;  &lt;%= link_to invoices_path, class: &quot;pure-button&quot; do %&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;arrow_back&lt;/span&gt; Back to Invoices&#10;  &lt;% end %&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;invoice-container&quot;&gt;&#10;  &lt;div class=&quot;invoice-content&quot;&gt;&#10;    &lt;!-- Header Section --&gt;&#10;    &lt;div class=&quot;invoice-header&quot;&gt;&#10;      &lt;div class=&quot;business-info&quot;&gt;&#10;        &lt;h2&gt;&lt;%= Rails.application.credentials.org_details[:name] %&gt;&lt;/h2&gt;&#10;        &lt;address&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:address1] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:address2] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:town] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:postcode] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:email] %&gt;&#10;        &lt;/address&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div class=&quot;invoice-title&quot;&gt;&#10;        &lt;h1&gt;INVOICE&lt;/h1&gt;&#10;        &lt;!-- Status Box --&gt;&#10;        &lt;% if @invoice.sent? || @invoice.paid? %&gt;&#10;          &lt;div class=&quot;invoice-status &lt;%= @invoice.status %&gt;&quot;&gt;&#10;            &lt;%= @invoice.status==&quot;sent&quot; ? &quot;Copy&quot; : @invoice.status.capitalize %&gt;&#10;          &lt;/div&gt;&#10;        &lt;% end %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Invoice Details Section --&gt;&#10;    &lt;div class=&quot;invoice-details&quot;&gt;&#10;      &lt;div class=&quot;client-info&quot;&gt;&#10;        &lt;h3&gt;Bill To:&lt;/h3&gt;&#10;        &lt;% bill_to = @invoice.payee || @invoice.client %&gt;&#10;        &lt;div class=&quot;client-name&quot;&gt;&lt;%= bill_to.name %&gt;&lt;/div&gt;&#10;        &lt;address&gt;&#10;          &lt;%= bill_to.address1 %&gt;&lt;br&gt;&#10;          &lt;% if bill_to.address2.present? %&gt;&#10;            &lt;%= bill_to.address2 %&gt;&lt;br&gt;&#10;          &lt;% end %&gt;&#10;          &lt;%= bill_to.town %&gt;&lt;br&gt;&#10;          &lt;%= bill_to.postcode %&gt;&#10;        &lt;/address&gt;&#10;&#10;        &lt;% if @invoice.payee.present? %&gt;&#10;          &lt;div class=&quot;services-for&quot;&gt;&#10;            &lt;h4&gt;Services For:&lt;/h4&gt;&#10;            &lt;div&gt;&lt;%= @invoice.client.name %&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;% end %&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div class=&quot;invoice-info&quot;&gt;&#10;        &lt;table&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt;Invoice Number:&lt;/th&gt;&#10;            &lt;td class=&quot;text-right&quot;&gt;&lt;%= @invoice.id %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt; Date:&lt;/th&gt;&#10;            &lt;td class=&quot;text-right&quot;&gt;&lt;%= @invoice.date.strftime('%d %b %Y') %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Sessions Table --&gt;&#10;    &lt;div class=&quot;invoice-items&quot;&gt;&#10;      &lt;table class=&quot;pure-table pure-table-bordered&quot;&gt;&#10;        &lt;thead&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt;Date&lt;/th&gt;&#10;            &lt;th&gt;Description&lt;/th&gt;&#10;            &lt;th&gt;Duration&lt;/th&gt;&#10;            &lt;th&gt;Rate&lt;/th&gt;&#10;            &lt;th class=&quot;text-right&quot;&gt;Amount&lt;/th&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;          &lt;% @invoice.client_sessions.order(session_date: :asc).each do |session| %&gt;&#10;            &lt;tr&gt;&#10;              &lt;td&gt;&lt;%= session.session_date.strftime('%d %b %Y') %&gt;&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.description %&gt;&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.duration %&gt; minutes&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.hourly_session_rate.format %&gt;&lt;/td&gt;&#10;              &lt;td class=&quot;text-right&quot;&gt;&lt;%= session.fee.format %&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;          &lt;% end %&gt;&#10;        &lt;/tbody&gt;&#10;        &lt;tfoot&gt;&#10;          &lt;tr&gt;&#10;            &lt;td colspan=&quot;4&quot; class=&quot;total-label&quot;&gt;Total Amount:&lt;/td&gt;&#10;            &lt;td class=&quot;total-amount text-right&quot;&gt;&lt;%= @invoice.amount.format %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/tfoot&gt;&#10;      &lt;/table&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Invoice Text Section --&gt;&#10;    &lt;% if @invoice.text.present? %&gt;&#10;      &lt;div class=&quot;invoice-text&quot;&gt;&#10;        &lt;h3&gt;Additional Information&lt;/h3&gt;&#10;        &lt;div class=&quot;rich-text-content&quot;&gt;&#10;          &lt;%= @invoice.text %&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;% end %&gt;&#10;&#10;    &lt;!-- Payment Details --&gt;&#10;    &lt;div class=&quot;payment-details&quot;&gt;&#10;      &lt;h3&gt;Payment Details&lt;/h3&gt;&#10;      &lt;p&gt;&#10;        Please make payment to:&lt;br&gt;&#10;        Bank: &lt;%= Rails.application.credentials.payment_details[:bank] || &quot;Bank plc&quot; %&gt;&lt;br&gt;&#10;        Account Name: &lt;%= Rails.application.credentials.payment_details[:account_name] || &quot;Katy's Account&quot; %&gt;&lt;br&gt;&#10;        Account Number: &lt;%= Rails.application.credentials.payment_details[:account_number] || &quot;012345678&quot; %&gt;&lt;br&gt;&#10;        Sort Code: &lt;%= Rails.application.credentials.payment_details[:sort_code] || &quot;00-00-00&quot; %&gt;&lt;br&gt;&#10;        Reference: INV-&lt;%= @invoice.id %&gt;&#10;      &lt;/p&gt;&#10;      &#10;      &lt;p class=&quot;payment-terms&quot;&gt;&#10;        Payment Terms: Due within 30 days of issue.&lt;br&gt;&#10;        Please ensure all payments include the invoice reference.&#10;      &lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Thank You Note --&gt;&#10;    &lt;div class=&quot;thank-you&quot;&gt;&#10;      &lt;p&gt;Thank you for your business!&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;% content_for :dialogues do %&gt;&#10;  &lt;%= render partial: 'shared/send_confirmation_dialog' %&gt;&#10;  &lt;%= render partial: 'shared/mark_paid_confirmation_dialog' %&gt;&#10;&lt;% end %&gt;&#10;&#10;&lt;style&gt;&#10;  @media print {&#10;    /* Hide everything by default */&#10;    body * {&#10;      visibility: hidden !important;&#10;    }&#10;&#10;    /* Make the invoice container and all its children visible */&#10;    .invoice-container,&#10;    .invoice-container * {&#10;      visibility: visible !important;&#10;    }&#10;&#10;    /* Style the invoice container to be the main content on the printed page */&#10;    .invoice-container {&#10;      position: absolute !important;&#10;      left: 0 !important;&#10;      top: 0 !important;&#10;      width: 100% !important;&#10;      min-height: 100% !important; /* Ensure it tries to fill height */&#10;      margin: 0 !important;&#10;      padding: 20px !important; /* Apply padding for the content within the container */&#10;      border: none !important;&#10;      box-shadow: none !important; /* Remove screen shadow */&#10;      background: white !important; /* Ensure container background is white */&#10;    }&#10;&#10;    /* If .invoice-content is inside .invoice-container, its padding might need adjustment.&#10;       The screen style for .invoice-content has padding: 20px.&#10;       If .invoice-container has padding: 20px for print, and .invoice-content also has padding,&#10;       it could be too much. Let's ensure .invoice-content's own padding is reset if needed,&#10;       relying on .invoice-container's padding.&#10;    */&#10;    .invoice-content {&#10;      padding: 0 !important; /* Reset padding if .invoice-container provides it */&#10;    }&#10;&#10;    body {&#10;      background: white !important; /* Ensure body background is white */&#10;    }&#10;    &#10;    @page {&#10;      margin: 0.5cm; /* Define page margins */&#10;    }&#10;  }&#10;  &#10;  /* Regular styles */&#10;  .invoice-container {&#10;    max-width: 800px;&#10;    margin: 20px auto;&#10;    background: white;&#10;    padding: 20px;&#10;    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);&#10;  }&#10;  &#10;  .invoice-content {&#10;    padding: 20px;&#10;  }&#10;  &#10;  .invoice-header {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    margin-bottom: 40px;&#10;    border-bottom: 2px solid #eee;&#10;    padding-bottom: 20px;&#10;  }&#10;  &#10;  .business-info {&#10;    flex: 1;&#10;  }&#10;  &#10;  .business-info h2 {&#10;    color: #333;&#10;    margin-bottom: 10px;&#10;  }&#10;  &#10;  .invoice-title {&#10;    text-align: right;&#10;  }&#10;  &#10;  .invoice-title h1 {&#10;    font-size: 32px;&#10;    color: #333;&#10;    margin-bottom: 5px;&#10;  }&#10;  &#10;  .invoice-status {&#10;    font-weight: bold;&#10;    padding: 5px 10px;&#10;    border-radius: 4px;&#10;    display: inline-block;&#10;  }&#10;  &#10;  .invoice-status.paid {&#10;    background-color: #5cb85c;&#10;    color: white;&#10;  }&#10;  &#10;  .invoice-status.sent {&#10;    background-color: #f0ad4e;&#10;    color: white;&#10;  }&#10;  &#10;  .invoice-details {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    margin-bottom: 30px;&#10;  }&#10;  &#10;  .client-info, .invoice-info {&#10;    flex: 1;&#10;  }&#10;  &#10;  .client-name {&#10;    font-weight: bold;&#10;    margin-bottom: 5px;&#10;  }&#10;  &#10;  .invoice-info table {&#10;    width: 100%;&#10;  }&#10;  &#10;  .invoice-info th {&#10;    text-align: left;&#10;    padding-right: 15px;&#10;    font-weight: normal;&#10;    color: #666;&#10;  }&#10;  &#10;  .invoice-items {&#10;    margin-bottom: 30px;&#10;  }&#10;  &#10;  .invoice-items table {&#10;    width: 100%;&#10;    border-collapse: collapse;&#10;  }&#10;  &#10;  .text-right {&#10;    text-align: right;&#10;  }&#10;  &#10;  .total-label {&#10;    text-align: right;&#10;    font-weight: bold;&#10;  }&#10;  &#10;  .total-amount {&#10;    font-weight: bold;&#10;    font-size: 1.1em;&#10;  }&#10;  &#10;  .payment-details {&#10;    margin-bottom: 30px;&#10;    padding: 15px;&#10;    background-color: #f9f9f9;&#10;    border-radius: 4px;&#10;  }&#10;  &#10;  .payment-terms {&#10;    margin-top: 15px;&#10;    font-style: italic;&#10;    color: #666;&#10;  }&#10;  &#10;  .thank-you {&#10;    text-align: center;&#10;    font-weight: bold;&#10;    color: #333;&#10;    padding: 20px 0;&#10;    font-size: 1.2em;&#10;  }&#10;  &#10;  address {&#10;    font-style: normal;&#10;    line-height: 1.5;&#10;    color: #555;&#10;  }&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/shared/_delete_confirmation.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/shared/_delete_confirmation.html.erb" />
              <option name="originalContent" value="&lt;div data-controller=&quot;delete-confirmation&quot; style=&quot;display: inline&quot;&gt;&#10;  &lt;button class=&quot;pure-button button-danger &lt;%= button_size %&gt;&quot;&#10;          data-id=&quot;&lt;%= entity.id %&gt;&quot;&#10;          data-entity-type=&quot;&lt;%= entity.class.to_s.parameterize %&gt;&quot;&#10;          data-name=&quot;&lt;%= entity.respond_to?(:summary) ? entity.summary : entity.to_s %&gt;&quot;&#10;          data-action=&quot;click-&gt;delete-confirmation#open&quot;&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;delete&lt;/span&gt; Delete&#10;  &lt;/button&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Delete Confirmation Modal --&gt;&#10;&lt;% unless @delete_confirmation_rendered %&gt;&#10;  &lt;% content_for :dialogues do %&gt;&#10;    &lt;dialog data-controller=&quot;delete-modal&quot; data-delete-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;delete-modal#clickOutside&quot;&gt;&#10;      &lt;div class=&quot;dialog-content&quot;&gt;&#10;        &lt;h3&gt;Confirm Deletion&lt;/h3&gt;&#10;        &lt;p&gt;Are you sure you want to delete: &lt;span data-delete-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;        &lt;p&gt;This action cannot be undone.&lt;/p&gt;&#10;        &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;          &lt;button id=&quot;cancel-delete&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;delete-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;          &lt;%= form_tag &quot;&quot;, method: :delete, class: &quot;dialog-form&quot;, data: { delete_modal_target: &quot;form&quot; } do %&gt;&#10;            &lt;button type=&quot;submit&quot; class=&quot;pure-button pure-button-primary button-danger&quot; data-action=&quot;click-&gt;delete-modal#close&quot;&gt;&#10;              &lt;span class=&quot;material-symbols-outlined&quot;&gt;delete&lt;/span&gt; Delete&#10;            &lt;/button&gt;&#10;          &lt;% end %&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/dialog&gt;&#10;  &lt;% end %&gt;&#10;  &lt;% @delete_confirmation_rendered = true %&gt;&#10;&lt;% end %&gt;&#10;&#10;&lt;style&gt;&#10;    /* Dialog styles */&#10;    #delete-confirmation-dialog {&#10;        padding: 0;&#10;        border: none;&#10;        border-radius: 8px;&#10;        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;        max-width: 450px;&#10;        width: 100%;&#10;    }&#10;&#10;    #delete-confirmation-dialog::backdrop {&#10;        background-color: rgba(0, 0, 0, 0.5);&#10;    }&#10;&#10;    .dialog-content {&#10;        padding: 20px;&#10;    }&#10;&#10;    .dialog-buttons {&#10;        display: flex;&#10;        justify-content: flex-end;&#10;        gap: 10px;&#10;        margin-top: 20px;&#10;    }&#10;&#10;    .dialog-form {&#10;        display: inline;&#10;    }&#10;&#10;    [id$=&quot;-to-delete&quot;] {&#10;        font-weight: bold;&#10;    }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;div data-controller=&quot;delete-confirmation&quot; style=&quot;display: inline&quot;&gt;&#10;  &lt;button class=&quot;pure-button button-danger &lt;%= button_size %&gt;&quot;&#10;          data-id=&quot;&lt;%= entity.id %&gt;&quot;&#10;          data-entity-type=&quot;&lt;%= entity.class.to_s.parameterize %&gt;&quot;&#10;          data-name=&quot;&lt;%= entity.respond_to?(:summary) ? entity.summary : entity.to_s %&gt;&quot;&#10;          data-action=&quot;click-&gt;delete-confirmation#open&quot;&gt;&#10;    &lt;span class=&quot;material-symbols-outlined&quot;&gt;delete&lt;/span&gt; Delete&#10;  &lt;/button&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Delete Confirmation Modal --&gt;&#10;&lt;% unless @delete_confirmation_rendered %&gt;&#10;  &lt;% content_for :dialogues do %&gt;&#10;    &lt;dialog data-controller=&quot;delete-modal&quot; data-delete-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;delete-modal#clickOutside&quot;&gt;&#10;      &lt;div class=&quot;dialog-content&quot;&gt;&#10;        &lt;h3&gt;Confirm Deletion&lt;/h3&gt;&#10;        &lt;p&gt;Are you sure you want to delete: &lt;span data-delete-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;        &lt;p&gt;This action cannot be undone.&lt;/p&gt;&#10;        &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;          &lt;button id=&quot;cancel-delete&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;delete-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;          &lt;%= form_tag &quot;&quot;, method: :delete, class: &quot;dialog-form&quot;, data: { delete_modal_target: &quot;form&quot; } do %&gt;&#10;            &lt;button type=&quot;submit&quot; class=&quot;pure-button pure-button-primary button-danger&quot; data-action=&quot;click-&gt;delete-modal#close&quot;&gt;&#10;              &lt;span class=&quot;material-symbols-outlined&quot;&gt;delete&lt;/span&gt; Delete&#10;            &lt;/button&gt;&#10;          &lt;% end %&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/dialog&gt;&#10;  &lt;% end %&gt;&#10;  &lt;% @delete_confirmation_rendered = true %&gt;&#10;&lt;% end %&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/shared/_mark_paid_confirmation_dialog.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/shared/_mark_paid_confirmation_dialog.html.erb" />
              <option name="originalContent" value="&lt;!-- Dialog for mark paid confirmation --&gt;&#10;&lt;dialog id=&quot;mark-paid-confirmation-dialog&quot; data-controller=&quot;mark-paid-modal&quot; data-mark-paid-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;mark-paid-modal#clickOutside&quot;&gt;&#10;  &lt;div class=&quot;dialog-content&quot;&gt;&#10;    &lt;h3&gt;Confirm Mark Invoice as Paid&lt;/h3&gt;&#10;    &lt;p&gt;Are you sure you want to mark the invoice as paid: &lt;span data-mark-paid-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;    &lt;p&gt;This will change the invoice status to &quot;paid&quot; and it cannot be undone.&lt;/p&gt;&#10;    &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;      &lt;button id=&quot;cancel-mark-paid&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;mark-paid-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;      &lt;%= form_tag &quot;&quot;, method: :put, id: &quot;mark-paid-invoice-form&quot;, class: &quot;dialog-form&quot;,&#10;                   data: { mark_paid_modal_target: &quot;form&quot;, action: &quot;submit-&gt;mark-paid-modal#close&quot; } do %&gt;&#10;        &lt;%= hidden_field_tag &quot;invoice[status]&quot;, &quot;paid&quot; %&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;pure-button button-success&quot;&gt;Mark as Paid&lt;/button&gt;&#10;      &lt;% end %&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/dialog&gt;&#10;&#10;&lt;style&gt;&#10;  /* Dialog styles */&#10;  #mark-paid-confirmation-dialog {&#10;    padding: 0;&#10;    border: none;&#10;    border-radius: 8px;&#10;    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;    max-width: 450px;&#10;    width: 100%;&#10;  }&#10;&#10;  #mark-paid-confirmation-dialog::backdrop {&#10;    background-color: rgba(0, 0, 0, 0.5);&#10;  }&#10;&#10;  .dialog-content {&#10;    padding: 20px;&#10;  }&#10;&#10;  .dialog-buttons {&#10;    display: flex;&#10;    justify-content: flex-end;&#10;    gap: 10px;&#10;    margin-top: 20px;&#10;  }&#10;&#10;  .dialog-form {&#10;    display: inline;&#10;  }&#10;&#10;  #invoice-to-mark-paid {&#10;    font-weight: bold;&#10;  }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;!-- Dialog for mark paid confirmation --&gt;&#10;&lt;dialog id=&quot;mark-paid-confirmation-dialog&quot; data-controller=&quot;mark-paid-modal&quot; data-mark-paid-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;mark-paid-modal#clickOutside&quot;&gt;&#10;  &lt;div class=&quot;dialog-content&quot;&gt;&#10;    &lt;h3&gt;Confirm Mark Invoice as Paid&lt;/h3&gt;&#10;    &lt;p&gt;Are you sure you want to mark the invoice as paid: &lt;span data-mark-paid-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;    &lt;p&gt;This will change the invoice status to &quot;paid&quot; and it cannot be undone.&lt;/p&gt;&#10;    &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;      &lt;button id=&quot;cancel-mark-paid&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;mark-paid-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;      &lt;%= form_tag &quot;&quot;, method: :put, id: &quot;mark-paid-invoice-form&quot;, class: &quot;dialog-form&quot;,&#10;                   data: { mark_paid_modal_target: &quot;form&quot;, action: &quot;submit-&gt;mark-paid-modal#close&quot; } do %&gt;&#10;        &lt;%= hidden_field_tag &quot;invoice[status]&quot;, &quot;paid&quot; %&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;pure-button button-success&quot;&gt;Mark as Paid&lt;/button&gt;&#10;      &lt;% end %&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/dialog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/shared/_send_confirmation_dialog.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/shared/_send_confirmation_dialog.html.erb" />
              <option name="originalContent" value="&lt;!-- Dialog for send confirmation --&gt;&#10;&lt;dialog id=&quot;send-confirmation-dialog&quot; data-controller=&quot;send-modal&quot; data-send-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;send-modal#clickOutside&quot;&gt;&#10;  &lt;div class=&quot;dialog-content&quot;&gt;&#10;    &lt;h3&gt;Confirm Send Invoice&lt;/h3&gt;&#10;    &lt;p&gt;Are you sure you want to send the invoice: &lt;span id=&quot;invoice-to-send&quot; data-send-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;    &lt;p&gt;This will send the invoice to the client and change its status to &quot;sent&quot;.&lt;/p&gt;&#10;    &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;      &lt;button id=&quot;cancel-send&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;send-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;      &lt;%= form_tag &quot;&quot;, method: :post, id: &quot;send-invoice-form&quot;, class: &quot;dialog-form&quot;, data: { send_modal_target: &quot;form&quot; } do %&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;pure-button pure-button-primary&quot;&gt;Send Invoice&lt;/button&gt;&#10;      &lt;% end %&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/dialog&gt;&#10;&#10;&lt;style&gt;&#10;  /* Dialog styles */&#10;  #send-confirmation-dialog {&#10;    padding: 0;&#10;    border: none;&#10;    border-radius: 8px;&#10;    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;    max-width: 450px;&#10;    width: 100%;&#10;  }&#10;&#10;  #send-confirmation-dialog::backdrop {&#10;    background-color: rgba(0, 0, 0, 0.5);&#10;  }&#10;&#10;  .dialog-content {&#10;    padding: 20px;&#10;  }&#10;&#10;  .dialog-buttons {&#10;    display: flex;&#10;    justify-content: flex-end;&#10;    gap: 10px;&#10;    margin-top: 20px;&#10;  }&#10;&#10;  .dialog-form {&#10;    display: inline;&#10;  }&#10;&#10;  #invoice-to-send {&#10;    font-weight: bold;&#10;  }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;!-- Dialog for send confirmation --&gt;&#10;&lt;dialog id=&quot;send-confirmation-dialog&quot; data-controller=&quot;send-modal&quot; data-send-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;send-modal#clickOutside&quot;&gt;&#10;  &lt;div class=&quot;dialog-content&quot;&gt;&#10;    &lt;h3&gt;Confirm Send Invoice&lt;/h3&gt;&#10;    &lt;p&gt;Are you sure you want to send the invoice: &lt;span id=&quot;invoice-to-send&quot; data-send-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;    &lt;p&gt;This will send the invoice to the client and change its status to &quot;sent&quot;.&lt;/p&gt;&#10;    &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;      &lt;button id=&quot;cancel-send&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;send-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;      &lt;%= form_tag &quot;&quot;, method: :post, id: &quot;send-invoice-form&quot;, class: &quot;dialog-form&quot;, data: { send_modal_target: &quot;form&quot; } do %&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;pure-button pure-button-primary&quot;&gt;Send Invoice&lt;/button&gt;&#10;      &lt;% end %&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/dialog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/spec/system/invoices_spec.rb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/spec/system/invoices_spec.rb" />
              <option name="originalContent" value="require 'rails_helper'&#10;&#10;RSpec.describe &quot;Invoices&quot;, type: :system do&#10;  include ActionText::SystemTestHelper&#10;&#10;  let!(:client) { FactoryBot.create(:client) }&#10;  let!(:payee) { FactoryBot.create(:payee) }&#10;  let!(:client_sessions) do&#10;    [&#10;      FactoryBot.create(:client_session, client: client, session_date: 1.week.ago, duration: 60),&#10;      FactoryBot.create(:client_session, client: client, session_date: 2.weeks.ago, duration: 90),&#10;      FactoryBot.create(:client_session, client: client, session_date: 3.weeks.ago, duration: 45)&#10;    ]&#10;  end&#10;&#10;  describe &quot;Invoice index page&quot; do&#10;    let!(:paid_invoice) { FactoryBot.create(:invoice, client: client, status: :paid) }&#10;    let!(:sent_invoice) { FactoryBot.create(:invoice, client: client, status: :sent) }&#10;    let!(:created_invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;displays all invoices with correct information&quot; do&#10;      visit invoices_path&#10;&#10;      expect(page).to have_content(&quot;Invoices&quot;)&#10;      expect(page).to have_link(created_invoice.id.to_s, href: invoice_path(created_invoice))&#10;      expect(page).to have_link(sent_invoice.id.to_s, href: invoice_path(sent_invoice))&#10;      expect(page).to have_link(paid_invoice.id.to_s, href: invoice_path(paid_invoice))&#10;      expect(page).to have_content(client.name)&#10;    end&#10;&#10;    it &quot;shows correct status badges for different invoice statuses&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.created&quot;, text: &quot;CREATED&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.sent&quot;, text: &quot;SENT&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.paid&quot;, text: &quot;PAID&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;shows delete button only for created invoices&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_button(&quot;Delete&quot;)&#10;        expect(page).to have_link(&quot;Edit&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).not_to have_button(&quot;Delete&quot;)&#10;        expect(page).not_to have_link(&quot;Edit&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).not_to have_button(&quot;Delete&quot;)&#10;        expect(page).not_to have_link(&quot;Edit&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;shows send button for created and sent invoices but not paid invoices&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_button(&quot;Send&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).to have_button(&quot;Send&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).not_to have_button(&quot;Send&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Creating a new invoice&quot; do&#10;    it &quot;allows creating an invoice with selected sessions&quot; do&#10;      visit new_client_invoice_path(client)&#10;&#10;      expect(page).to have_content(&quot;New Invoice for #{client.name}&quot;)&#10;&#10;      # Fill in invoice details&#10;      fill_in &quot;Date&quot;, with: Date.current.strftime(&quot;%Y-%m-%d&quot;)&#10;      select payee.name, from: &quot;Payee&quot;&#10;      fill_in_rich_textarea &quot;Text&quot;, with: &quot;Invoice for consulting services&quot;&#10;&#10;      # Select some sessions&#10;      uncheck &quot;session_#{client_sessions[2].id}&quot;&#10;&#10;      click_button &quot;Create Invoice&quot;&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully generated&quot;)&#10;&#10;      # Verify the invoice was created correctly&#10;      invoice = Invoice.last&#10;      expect(invoice.client).to eq(client)&#10;      expect(invoice.payee).to eq(payee)&#10;      expect(invoice.text.body.to_plain_text).to eq(&quot;Invoice for consulting services&quot;)&#10;      expect(invoice.client_sessions).to include(client_sessions[0], client_sessions[1])&#10;      expect(invoice.client_sessions).not_to include(client_sessions[2])&#10;    end&#10;&#10;    it &quot;prepopulates text field with relevant messages when creating new invoice&quot;, js: true do&#10;      # Create some messages for the client&#10;      message1 = FactoryBot.create(:message, :for_all_clients, text: &quot;General Message for all clients&quot;, created_at: 1.week.ago)&#10;      message2 = FactoryBot.create(:message, text: &quot;Specific Message for #{client.name}&quot;, created_at: 2.days.ago).apply_to_client(client)&#10;&#10;      visit new_client_invoice_path(client)&#10;&#10;      within(&quot;#invoice_text&quot;) do&#10;        expect(page).to have_content(&quot;General Message for all clients&quot;)&#10;        expect(page).to have_content(&quot;Specific Message for #{client.name}&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Viewing an invoice&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, payee: payee, text: &quot;Test invoice text&quot;) }&#10;&#10;    it &quot;displays invoice details correctly&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      within(&quot;div.invoice-info &gt; table &gt; tbody &gt; tr:nth-child(1)&quot;) do&#10;        expect(page).to have_content(&quot;Invoice Number&quot;)&#10;        expect(page).to have_content(invoice.id.to_s)&#10;      end&#10;&#10;      within(&quot;div.invoice-info &gt; table &gt; tbody &gt; tr:nth-child(2)&quot;) do&#10;        expect(page).to have_content(&quot;Date&quot;)&#10;        expect(page).to have_content(invoice.date.strftime('%d %b %Y'))&#10;      end&#10;&#10;      expect(page).to have_content(client.name)&#10;      expect(page).to have_content(payee.name)&#10;      expect(page).to have_content(&quot;Test invoice text&quot;)&#10;    end&#10;&#10;    it &quot;shows session details in the invoice&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      invoice.client_sessions.each do |session|&#10;        expect(page).to have_content(session.session_date.strftime('%d %b %Y'))&#10;        expect(page).to have_content(&quot;#{session.duration} minutes&quot;)&#10;        expect(page).to have_content(session.hourly_session_rate.format)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Editing an invoice&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;allows editing a created invoice&quot; do&#10;      visit edit_invoice_path(invoice)&#10;&#10;      expect(page).to have_content(&quot;Edit Invoice&quot;)&#10;&#10;      fill_in_rich_textarea &quot;Text&quot;, with: &quot;Updated invoice text&quot;&#10;      click_button &quot;Update Invoice&quot;&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully updated&quot;)&#10;      expect(page).to have_content(&quot;Updated invoice text&quot;)&#10;    end&#10;&#10;    it &quot;prevents editing sent invoices&quot; do&#10;      invoice.update!(status: :sent)&#10;&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;&#10;      # Try to access edit page directly&#10;      visit edit_invoice_path(invoice)&#10;      expect(page).to have_content(&quot;Cannot edit invoice that has been sent or paid&quot;)&#10;    end&#10;&#10;    it &quot;prevents editing paid invoices&quot; do&#10;      invoice.update!(status: :paid)&#10;&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;&#10;      # Try to access edit page directly&#10;      visit edit_invoice_path(invoice)&#10;      expect(page).to have_content(&quot;Cannot edit invoice that has been sent or paid&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Sending an invoice&quot;, js: true do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    shared_examples &quot;send invoice&quot; do&#10;      it &quot;allows sending an invoice with confirmation dialog&quot; do&#10;        # Wait for the send confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(page).to have_content(&quot;Confirm Send Invoice&quot;)&#10;        expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;&#10;        within(&quot;dialog#send-confirmation-dialog&quot;) do&#10;          click_button &quot;Send Invoice&quot;&#10;        end&#10;&#10;        expect(page).to have_content(&quot;Invoice was successfully sent&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling the send action&quot; do&#10;        within(&quot;dialog#send-confirmation-dialog&quot;) do&#10;          click_button &quot;Cancel&quot;&#10;        end&#10;&#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;created&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling by clicking outside the dialog&quot; do&#10;        # Wait for the send confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;&#10;        # Click outside the dialog (on the dialog backdrop)&#10;        page.execute_script(&quot;document.querySelector('#send-confirmation-dialog').click()&quot;)&#10;&#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;created&quot;)&#10;      end&#10;    end&#10;&#10;    context &quot;when on the index page&quot; do&#10;      before do&#10;        visit invoices_path&#10;&#10;        within(&quot;tbody tr:first-child&quot;) do&#10;          click_button &quot;Send&quot;&#10;        end&#10;      end&#10;&#10;      include_examples &quot;send invoice&quot;&#10;    end&#10;&#10;    context &quot;when on the show page&quot; do&#10;      before do&#10;        visit invoice_path(invoice)&#10;        sleep 60&#10;        click_button &quot;Send&quot;&#10;      end&#10;&#10;      include_examples &quot;send invoice&quot;&#10;    end&#10;  end&#10;&#10;  describe &quot;Deleting an invoice&quot;, js: true do&#10;    let!(:created_invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;    let!(:sent_invoice) { FactoryBot.create(:invoice, client: client, status: :sent) }&#10;&#10;    it &quot;allows deleting a created invoice with confirmation dialog&quot; do&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      # Wait for the delete confirmation dialog to appear&#10;      expect(page).to have_css(&quot;dialog[open]&quot;)&#10;      expect(page).to have_content(&quot;Are you sure you want to delete&quot;)&#10;      expect(page).to have_content(&quot;Invoice ##{created_invoice.id}&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Delete&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully deleted&quot;)&#10;      expect(page).not_to have_content(&quot;Invoice ##{created_invoice.id}&quot;)&#10;    end&#10;&#10;    it &quot;allows canceling the delete action&quot; do&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      # Wait for the delete confirmation dialog to appear&#10;      expect(page).to have_css(&quot;dialog[open]&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Cancel&quot;&#10;      end&#10;&#10;      # Dialog should close and invoice should still be there&#10;      expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;&#10;      expect(page).to have_link(created_invoice.id.to_s)&#10;    end&#10;&#10;    it &quot;prevents deleting sent invoices by not showing delete button&quot; do&#10;      visit invoices_path&#10;&#10;      row = find_link(sent_invoice.id.to_s).ancestor('tr')&#10;      expect(row).not_to have_button(&quot;Delete&quot;)&#10;    end&#10;&#10;    it &quot;frees up associated sessions when invoice is deleted&quot; do&#10;      # Create an invoice with specific sessions&#10;      session1 = client_sessions[0]&#10;      session2 = client_sessions[1]&#10;&#10;      created_invoice.client_sessions &lt;&lt; [ session1, session2 ]&#10;&#10;      expect(session1.reload.invoice_id).to eq(created_invoice.id)&#10;      expect(session2.reload.invoice_id).to eq(created_invoice.id)&#10;&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Delete&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully deleted&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Invoice status transitions&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;transitions from created to sent&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      click_button &quot;Send&quot;&#10;&#10;      within &quot;#send-confirmation-dialog&quot; do&#10;        expect(page).to have_content(&quot;Confirm Send Invoice&quot;)&#10;        expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;        click_button &quot;Send&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully sent&quot;)&#10;&#10;      expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;    end&#10;&#10;    it &quot;shows appropriate actions for each status&quot; do&#10;      # Created status&#10;      visit invoice_path(invoice)&#10;      expect(page).to have_link(&quot;Edit&quot;)&#10;      expect(page).to have_link(&quot;Send&quot;)&#10;&#10;      # Send the invoice&#10;      accept_confirm(&quot;Are you sure you want to send this invoice?&quot;) do&#10;        click_link &quot;Send&quot;&#10;      end&#10;&#10;      # Sent status&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;      expect(page).to have_link(&quot;Send&quot;) # Can resend&#10;&#10;      # Mark as paid (this would typically be done through a different interface)&#10;      invoice.update!(status: :paid)&#10;&#10;      # Paid status&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;      expect(page).not_to have_link(&quot;Send&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Empty state&quot; do&#10;    it &quot;shows appropriate message when no invoices exist&quot; do&#10;      Invoice.destroy_all&#10;&#10;      visit invoices_path&#10;&#10;      expect(page).to have_content(&quot;No invoices found&quot;)&#10;      expect(page).to have_content(&quot;Create your first invoice by selecting a client and generating an invoice for their sessions&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Invoice navigation&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client) }&#10;&#10;    it &quot;allows navigation from invoice index to individual invoice&quot; do&#10;      visit invoices_path&#10;&#10;      click_link &quot;#{invoice.id}&quot;&#10;&#10;      expect(current_path).to eq(invoice_path(invoice))&#10;      expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;    end&#10;&#10;    it &quot;allows navigation from client to new invoice&quot; do&#10;      visit client_path(client)&#10;&#10;      click_link &quot;Invoice&quot;, match: :first&#10;&#10;      expect(current_path).to eq(new_client_invoice_path(client))&#10;      expect(page).to have_content(&quot;New Invoice&quot;)&#10;    end&#10;  end&#10;end&#10;" />
              <option name="updatedContent" value="require 'rails_helper'&#10;&#10;RSpec.describe &quot;Invoices&quot;, type: :system do&#10;  include ActionText::SystemTestHelper&#10;&#10;  let!(:client) { FactoryBot.create(:client) }&#10;  let!(:payee) { FactoryBot.create(:payee) }&#10;  let!(:client_sessions) do&#10;    [&#10;      FactoryBot.create(:client_session, client: client, session_date: 1.week.ago, duration: 60),&#10;      FactoryBot.create(:client_session, client: client, session_date: 2.weeks.ago, duration: 90),&#10;      FactoryBot.create(:client_session, client: client, session_date: 3.weeks.ago, duration: 45)&#10;    ]&#10;  end&#10;&#10;  describe &quot;Invoice index page&quot; do&#10;    let!(:paid_invoice) { FactoryBot.create(:invoice, client: client, status: :paid) }&#10;    let!(:sent_invoice) { FactoryBot.create(:invoice, client: client, status: :sent) }&#10;    let!(:created_invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;displays all invoices with correct information&quot; do&#10;      visit invoices_path&#10;&#10;      expect(page).to have_content(&quot;Invoices&quot;)&#10;      expect(page).to have_link(created_invoice.id.to_s, href: invoice_path(created_invoice))&#10;      expect(page).to have_link(sent_invoice.id.to_s, href: invoice_path(sent_invoice))&#10;      expect(page).to have_link(paid_invoice.id.to_s, href: invoice_path(paid_invoice))&#10;      expect(page).to have_content(client.name)&#10;    end&#10;&#10;    it &quot;shows correct status badges for different invoice statuses&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.created&quot;, text: &quot;CREATED&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.sent&quot;, text: &quot;SENT&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).to have_css(&quot;.status-badge.paid&quot;, text: &quot;PAID&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;shows delete button only for created invoices&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_button(&quot;Delete&quot;)&#10;        expect(page).to have_link(&quot;Edit&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).not_to have_button(&quot;Delete&quot;)&#10;        expect(page).not_to have_link(&quot;Edit&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).not_to have_button(&quot;Delete&quot;)&#10;        expect(page).not_to have_link(&quot;Edit&quot;)&#10;      end&#10;    end&#10;&#10;    it &quot;shows send button for created and sent invoices but not paid invoices&quot; do&#10;      visit invoices_path&#10;&#10;      within(&quot;tbody tr:first-child&quot;) do&#10;        expect(page).to have_button(&quot;Send&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(2)&quot;) do&#10;        expect(page).to have_button(&quot;Send&quot;)&#10;      end&#10;&#10;      within(&quot;tbody tr:nth-child(3)&quot;) do&#10;        expect(page).not_to have_button(&quot;Send&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Creating a new invoice&quot; do&#10;    it &quot;allows creating an invoice with selected sessions&quot; do&#10;      visit new_client_invoice_path(client)&#10;&#10;      expect(page).to have_content(&quot;New Invoice for #{client.name}&quot;)&#10;&#10;      # Fill in invoice details&#10;      fill_in &quot;Date&quot;, with: Date.current.strftime(&quot;%Y-%m-%d&quot;)&#10;      select payee.name, from: &quot;Payee&quot;&#10;      fill_in_rich_textarea &quot;Text&quot;, with: &quot;Invoice for consulting services&quot;&#10;&#10;      # Select some sessions&#10;      uncheck &quot;session_#{client_sessions[2].id}&quot;&#10;&#10;      click_button &quot;Create Invoice&quot;&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully generated&quot;)&#10;&#10;      # Verify the invoice was created correctly&#10;      invoice = Invoice.last&#10;      expect(invoice.client).to eq(client)&#10;      expect(invoice.payee).to eq(payee)&#10;      expect(invoice.text.body.to_plain_text).to eq(&quot;Invoice for consulting services&quot;)&#10;      expect(invoice.client_sessions).to include(client_sessions[0], client_sessions[1])&#10;      expect(invoice.client_sessions).not_to include(client_sessions[2])&#10;    end&#10;&#10;    it &quot;prepopulates text field with relevant messages when creating new invoice&quot;, js: true do&#10;      # Create some messages for the client&#10;      message1 = FactoryBot.create(:message, :for_all_clients, text: &quot;General Message for all clients&quot;, created_at: 1.week.ago)&#10;      message2 = FactoryBot.create(:message, text: &quot;Specific Message for #{client.name}&quot;, created_at: 2.days.ago).apply_to_client(client)&#10;&#10;      visit new_client_invoice_path(client)&#10;&#10;      within(&quot;#invoice_text&quot;) do&#10;        expect(page).to have_content(&quot;General Message for all clients&quot;)&#10;        expect(page).to have_content(&quot;Specific Message for #{client.name}&quot;)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Viewing an invoice&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, payee: payee, text: &quot;Test invoice text&quot;) }&#10;&#10;    it &quot;displays invoice details correctly&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      within(&quot;div.invoice-info &gt; table &gt; tbody &gt; tr:nth-child(1)&quot;) do&#10;        expect(page).to have_content(&quot;Invoice Number&quot;)&#10;        expect(page).to have_content(invoice.id.to_s)&#10;      end&#10;&#10;      within(&quot;div.invoice-info &gt; table &gt; tbody &gt; tr:nth-child(2)&quot;) do&#10;        expect(page).to have_content(&quot;Date&quot;)&#10;        expect(page).to have_content(invoice.date.strftime('%d %b %Y'))&#10;      end&#10;&#10;      expect(page).to have_content(client.name)&#10;      expect(page).to have_content(payee.name)&#10;      expect(page).to have_content(&quot;Test invoice text&quot;)&#10;    end&#10;&#10;    it &quot;shows session details in the invoice&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      invoice.client_sessions.each do |session|&#10;        expect(page).to have_content(session.session_date.strftime('%d %b %Y'))&#10;        expect(page).to have_content(&quot;#{session.duration} minutes&quot;)&#10;        expect(page).to have_content(session.hourly_session_rate.format)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe &quot;Editing an invoice&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;allows editing a created invoice&quot; do&#10;      visit edit_invoice_path(invoice)&#10;&#10;      expect(page).to have_content(&quot;Edit Invoice&quot;)&#10;&#10;      fill_in_rich_textarea &quot;Text&quot;, with: &quot;Updated invoice text&quot;&#10;      click_button &quot;Update Invoice&quot;&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully updated&quot;)&#10;      expect(page).to have_content(&quot;Updated invoice text&quot;)&#10;    end&#10;&#10;    it &quot;prevents editing sent invoices&quot; do&#10;      invoice.update!(status: :sent)&#10;&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;&#10;      # Try to access edit page directly&#10;      visit edit_invoice_path(invoice)&#10;      expect(page).to have_content(&quot;Cannot edit invoice that has been sent or paid&quot;)&#10;    end&#10;&#10;    it &quot;prevents editing paid invoices&quot; do&#10;      invoice.update!(status: :paid)&#10;&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;&#10;      # Try to access edit page directly&#10;      visit edit_invoice_path(invoice)&#10;      expect(page).to have_content(&quot;Cannot edit invoice that has been sent or paid&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Sending an invoice&quot;, js: true do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    shared_examples &quot;send invoice&quot; do&#10;      it &quot;allows sending an invoice with confirmation dialog&quot; do&#10;        # Wait for the send confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(page).to have_content(&quot;Confirm Send Invoice&quot;)&#10;        expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;&#10;        within(&quot;dialog#send-confirmation-dialog&quot;) do&#10;          click_button &quot;Send Invoice&quot;&#10;        end&#10;&#10;        expect(page).to have_content(&quot;Invoice was successfully sent&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling the send action&quot; do&#10;        within(&quot;dialog#send-confirmation-dialog&quot;) do&#10;          click_button &quot;Cancel&quot;&#10;        end&#10;&#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;created&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling by clicking outside the dialog&quot; do&#10;        # Wait for the send confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;&#10;        # Click outside the dialog (on the dialog backdrop)&#10;        page.execute_script(&quot;document.querySelector('#send-confirmation-dialog').click()&quot;)&#10;&#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog#send-confirmation-dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;created&quot;)&#10;      end&#10;    end&#10;&#10;    context &quot;when on the index page&quot; do&#10;      before do&#10;        visit invoices_path&#10;&#10;        within(&quot;tbody tr:first-child&quot;) do&#10;          click_button &quot;Send&quot;&#10;        end&#10;      end&#10;&#10;      include_examples &quot;send invoice&quot;&#10;    end&#10;&#10;    context &quot;when on the show page&quot; do&#10;      before do&#10;        visit invoice_path(invoice)&#10;        sleep 60&#10;        click_button &quot;Send&quot;&#10;      end&#10;&#10;      include_examples &quot;send invoice&quot;&#10;    end&#10;  end&#10;&#10;  describe &quot;Marking an invoice as paid&quot;, js: true do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :sent) }&#10;&#10;    shared_examples &quot;mark invoice as paid&quot; do&#10;      it &quot;allows marking an invoice as paid with confirmation dialog&quot; do&#10;        # Wait for the mark paid confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#mark-paid-confirmation-dialog[open]&quot;)&#10;        expect(page).to have_content(&quot;Confirm Mark Invoice as Paid&quot;)&#10;        expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;&#10;        within(&quot;dialog#mark-paid-confirmation-dialog&quot;) do&#10;          click_button &quot;Mark as Paid&quot;&#10;        end&#10;&#10;        expect(page).to have_content(&quot;Invoice was successfully marked as paid&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;paid&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling the mark as paid action&quot; do&#10;        within(&quot;dialog#mark-paid-confirmation-dialog&quot;) do&#10;          click_button &quot;Cancel&quot;&#10;        end&#10;&#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;      end&#10;&#10;      it &quot;allows canceling by clicking outside the dialog&quot; do&#10;        # Wait for the mark paid confirmation dialog to appear&#10;        expect(page).to have_css(&quot;dialog#mark-paid-confirmation-dialog[open]&quot;)&#10;        &#10;        # Click outside the dialog (on the dialog backdrop)&#10;        page.execute_script(&quot;document.querySelector('#mark-paid-confirmation-dialog').click()&quot;)&#10;        &#10;        # Dialog should close and invoice should remain unchanged&#10;        expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;        expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;      end&#10;    end&#10;&#10;    context &quot;when on the index page&quot; do&#10;      before do&#10;        visit invoices_path&#10;&#10;        within(&quot;tbody tr:first-child&quot;) do&#10;          click_button &quot;Mark as Paid&quot;&#10;        end&#10;      end&#10;&#10;      include_examples &quot;mark invoice as paid&quot;&#10;    end&#10;&#10;    context &quot;when on the show page&quot; do&#10;      before do&#10;        visit invoice_path(invoice)&#10;&#10;        click_button &quot;Mark as Paid&quot;&#10;      end&#10;&#10;      include_examples &quot;mark invoice as paid&quot;&#10;    end&#10;  end&#10;&#10;  describe &quot;Deleting an invoice&quot;, js: true do&#10;    let!(:created_invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;    let!(:sent_invoice) { FactoryBot.create(:invoice, client: client, status: :sent) }&#10;&#10;    it &quot;allows deleting a created invoice with confirmation dialog&quot; do&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      # Wait for the delete confirmation dialog to appear&#10;      expect(page).to have_css(&quot;dialog[open]&quot;)&#10;      expect(page).to have_content(&quot;Are you sure you want to delete&quot;)&#10;      expect(page).to have_content(&quot;Invoice ##{created_invoice.id}&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Delete&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully deleted&quot;)&#10;      expect(page).not_to have_content(&quot;Invoice ##{created_invoice.id}&quot;)&#10;    end&#10;&#10;    it &quot;allows canceling the delete action&quot; do&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      # Wait for the delete confirmation dialog to appear&#10;      expect(page).to have_css(&quot;dialog[open]&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Cancel&quot;&#10;      end&#10;&#10;      # Dialog should close and invoice should still be there&#10;      expect(page).not_to have_css(&quot;dialog[open]&quot;)&#10;&#10;      expect(page).to have_link(created_invoice.id.to_s)&#10;    end&#10;&#10;    it &quot;prevents deleting sent invoices by not showing delete button&quot; do&#10;      visit invoices_path&#10;&#10;      row = find_link(sent_invoice.id.to_s).ancestor('tr')&#10;      expect(row).not_to have_button(&quot;Delete&quot;)&#10;    end&#10;&#10;    it &quot;frees up associated sessions when invoice is deleted&quot; do&#10;      # Create an invoice with specific sessions&#10;      session1 = client_sessions[0]&#10;      session2 = client_sessions[1]&#10;&#10;      created_invoice.client_sessions &lt;&lt; [ session1, session2 ]&#10;&#10;      expect(session1.reload.invoice_id).to eq(created_invoice.id)&#10;      expect(session2.reload.invoice_id).to eq(created_invoice.id)&#10;&#10;      visit invoices_path&#10;&#10;      find_link(created_invoice.id.to_s).ancestor('tr').click_button(&quot;Delete&quot;)&#10;&#10;      within(&quot;dialog&quot;) do&#10;        click_button &quot;Delete&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully deleted&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Invoice status transitions&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client, status: :created) }&#10;&#10;    it &quot;transitions from created to sent&quot; do&#10;      visit invoice_path(invoice)&#10;&#10;      click_button &quot;Send&quot;&#10;&#10;      within &quot;#send-confirmation-dialog&quot; do&#10;        expect(page).to have_content(&quot;Confirm Send Invoice&quot;)&#10;        expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;        click_button &quot;Send&quot;&#10;      end&#10;&#10;      expect(page).to have_content(&quot;Invoice was successfully sent&quot;)&#10;&#10;      expect(invoice.reload.status).to eq(&quot;sent&quot;)&#10;    end&#10;&#10;    it &quot;shows appropriate actions for each status&quot; do&#10;      # Created status&#10;      visit invoice_path(invoice)&#10;      expect(page).to have_link(&quot;Edit&quot;)&#10;      expect(page).to have_link(&quot;Send&quot;)&#10;&#10;      # Send the invoice&#10;      accept_confirm(&quot;Are you sure you want to send this invoice?&quot;) do&#10;        click_link &quot;Send&quot;&#10;      end&#10;&#10;      # Sent status&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;      expect(page).to have_link(&quot;Send&quot;) # Can resend&#10;&#10;      # Mark as paid (this would typically be done through a different interface)&#10;      invoice.update!(status: :paid)&#10;&#10;      # Paid status&#10;      visit invoice_path(invoice)&#10;      expect(page).not_to have_link(&quot;Edit&quot;)&#10;      expect(page).not_to have_link(&quot;Send&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Empty state&quot; do&#10;    it &quot;shows appropriate message when no invoices exist&quot; do&#10;      Invoice.destroy_all&#10;&#10;      visit invoices_path&#10;&#10;      expect(page).to have_content(&quot;No invoices found&quot;)&#10;      expect(page).to have_content(&quot;Create your first invoice by selecting a client and generating an invoice for their sessions&quot;)&#10;    end&#10;  end&#10;&#10;  describe &quot;Invoice navigation&quot; do&#10;    let!(:invoice) { FactoryBot.create(:invoice, client: client) }&#10;&#10;    it &quot;allows navigation from invoice index to individual invoice&quot; do&#10;      visit invoices_path&#10;&#10;      click_link &quot;#{invoice.id}&quot;&#10;&#10;      expect(current_path).to eq(invoice_path(invoice))&#10;      expect(page).to have_content(&quot;Invoice ##{invoice.id}&quot;)&#10;    end&#10;&#10;    it &quot;allows navigation from client to new invoice&quot; do&#10;      visit client_path(client)&#10;&#10;      click_link &quot;Invoice&quot;, match: :first&#10;&#10;      expect(current_path).to eq(new_client_invoice_path(client))&#10;      expect(page).to have_content(&quot;New Invoice&quot;)&#10;    end&#10;  end&#10;end&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>