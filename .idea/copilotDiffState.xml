<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/javascript/controllers/send_confirmation_controller.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/javascript/controllers/send_confirmation_controller.js" />
              <option name="updatedContent" value="import { Controller } from &quot;@hotwired/stimulus&quot;&#10;&#10;export default class extends Controller {&#10;  open(event) {&#10;    const id = event.currentTarget.getAttribute('data-id');&#10;    const name = event.currentTarget.getAttribute('data-name');&#10;&#10;    // Dispatch custom event to be handled by send_modal_controller&#10;    const sendEvent = new CustomEvent(`send-invoice`, {&#10;      bubbles: true,&#10;      detail: {&#10;        id: id,&#10;        name: name&#10;      }&#10;    });&#10;&#10;    document.dispatchEvent(sendEvent);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/javascript/controllers/send_modal_controller.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/javascript/controllers/send_modal_controller.js" />
              <option name="updatedContent" value="import { Controller } from &quot;@hotwired/stimulus&quot;&#10;&#10;export default class extends Controller {&#10;  static targets = [&quot;dialog&quot;, &quot;form&quot;, &quot;name&quot;]&#10;&#10;  connect() {&#10;    this.boundHandler = this.handleSendRequest.bind(this);&#10;    document.addEventListener('send-invoice', this.boundHandler);&#10;  }&#10;&#10;  disconnect() {&#10;    document.removeEventListener('send-invoice', this.boundHandler);&#10;  }&#10;&#10;  handleSendRequest(event) {&#10;    const { id, name } = event.detail;&#10;&#10;    // Set the invoice name in the dialog&#10;    this.nameTarget.textContent = name;&#10;&#10;    // Set the form action to the send_invoice path&#10;    this.formTarget.action = `/invoices/${id}/send_invoice`;&#10;&#10;    // Show the dialog&#10;    this.dialogTarget.showModal();&#10;  }&#10;&#10;  close() {&#10;    this.dialogTarget.close();&#10;  }&#10;&#10;  clickOutside(event) {&#10;    if (event.target === this.dialogTarget) {&#10;      this.dialogTarget.close();&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/invoices/index.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/invoices/index.html.erb" />
              <option name="originalContent" value="&lt;% content_for :title, &quot;Invoices&quot; %&gt;&#10;&#10;&lt;div class=&quot;page-header&quot;&gt;&#10;  &lt;h1&gt;Invoices&lt;/h1&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;invoices-index&quot;&gt;&#10;  &lt;% if @invoices.any? %&gt;&#10;    &lt;table class=&quot;pure-table pure-table-striped&quot;&gt;&#10;      &lt;thead&gt;&#10;        &lt;tr&gt;&#10;          &lt;th&gt;Invoice #&lt;/th&gt;&#10;          &lt;th&gt;Client&lt;/th&gt;&#10;          &lt;th&gt;Date&lt;/th&gt;&#10;          &lt;th&gt;Amount&lt;/th&gt;&#10;          &lt;th&gt;Status&lt;/th&gt;&#10;          &lt;th&gt;Actions&lt;/th&gt;&#10;        &lt;/tr&gt;&#10;      &lt;/thead&gt;&#10;      &lt;tbody data-controller=&quot;delete-confirmation&quot;&gt;&#10;        &lt;% @invoices.each do |invoice| %&gt;&#10;          &lt;tr&gt;&#10;            &lt;td&gt;&lt;%= link_to invoice.id, invoice_path(invoice) %&gt;&lt;/td&gt;&#10;            &lt;td&gt;&lt;%= invoice.client.name %&gt;&lt;/td&gt;&#10;            &lt;td&gt;&lt;%= invoice.date.strftime('%d %b %Y') if invoice.date %&gt;&lt;/td&gt;&#10;            &lt;td&gt;&lt;%= invoice.amount.format if invoice.amount %&gt;&lt;/td&gt;&#10;            &lt;td&gt;&#10;              &lt;span class=&quot;status-badge &lt;%= invoice.status %&gt;&quot;&gt;&#10;                &lt;%= invoice.status.humanize %&gt;&#10;              &lt;/span&gt;&#10;            &lt;/td&gt;&#10;            &lt;td class=&quot;actions&quot;&gt;&#10;              &lt;%= link_to &quot;View&quot;, invoice_path(invoice), class: &quot;pure-button pure-button-primary button-small&quot; %&gt;&#10;&#10;              &lt;% if invoice.created? %&gt;&#10;                &lt;%= link_to &quot;Edit&quot;, edit_invoice_path(invoice), class: &quot;pure-button button-small&quot; %&gt;&#10;                &lt;button class=&quot;pure-button button-small button-danger delete-invoice-btn&quot;&#10;                        data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;                        data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;                        data-action=&quot;click-&gt;delete-confirmation#open&quot;&gt;Delete&lt;/button&gt;&#10;              &lt;% end %&gt;&#10;&#10;              &lt;% unless invoice.paid? %&gt;&#10;                &lt;%= link_to &quot;Send&quot;, send_invoice_invoice_path(invoice),&#10;                    method: :post,&#10;                    class: &quot;pure-button pure-button-primary button-small&quot;,&#10;                    data: {&#10;                      turbo_method: :post,&#10;                      turbo_confirm: &quot;Are you sure you want to send this invoice?&quot;&#10;                    } %&gt;&#10;              &lt;% end %&gt;&#10;            &lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        &lt;% end %&gt;&#10;      &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;  &lt;% else %&gt;&#10;    &lt;div class=&quot;no-invoices&quot;&gt;&#10;      &lt;p&gt;No invoices found.&lt;/p&gt;&#10;      &lt;p&gt;Create your first invoice by selecting a client and generating an invoice for their sessions.&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  &lt;% end %&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;%= render partial: 'shared/delete_confirmation_dialog', locals: { entity_type: 'invoice' } %&gt;&#10;&#10;&lt;style&gt;&#10;  .page-header {&#10;    margin-bottom: 2em;&#10;    border-bottom: 2px solid #eee;&#10;    padding-bottom: 1em;&#10;  }&#10;&#10;  .invoices-index {&#10;    margin: 20px 0;&#10;  }&#10;&#10;  .pure-table {&#10;    width: 100%;&#10;    margin-bottom: 2em;&#10;  }&#10;&#10;  .pure-table th,&#10;  .pure-table td {&#10;    padding: 12px;&#10;    text-align: left;&#10;    border-bottom: 1px solid #e0e0e0;&#10;  }&#10;&#10;  .pure-table th {&#10;    background-color: #f7f7f7;&#10;    font-weight: bold;&#10;  }&#10;&#10;  .actions {&#10;    white-space: nowrap;&#10;  }&#10;&#10;  .actions .pure-button {&#10;    margin-right: 5px;&#10;  }&#10;&#10;  .button-small {&#10;    padding: 4px 8px;&#10;    font-size: 12px;&#10;  }&#10;&#10;  .button-danger {&#10;    background-color: #d9534f;&#10;    color: white;&#10;  }&#10;&#10;  .button-danger:hover {&#10;    background-color: #c9302c;&#10;  }&#10;&#10;  .status-badge {&#10;    padding: 3px 8px;&#10;    border-radius: 4px;&#10;    font-size: 12px;&#10;    font-weight: bold;&#10;    text-transform: uppercase;&#10;  }&#10;&#10;  .status-badge.created {&#10;    background-color: #f0f0f0;&#10;    color: #666;&#10;  }&#10;&#10;  .status-badge.sent {&#10;    background-color: #d9edf7;&#10;    color: #31708f;&#10;  }&#10;&#10;  .status-badge.paid {&#10;    background-color: #dff0d8;&#10;    color: #3c763d;&#10;  }&#10;&#10;  .no-invoices {&#10;    text-align: center;&#10;    padding: 40px;&#10;    color: #666;&#10;  }&#10;&#10;  .no-invoices p {&#10;    margin-bottom: 10px;&#10;  }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;% content_for :title, &quot;Invoices&quot; %&gt;&#10;&#10;&lt;div class=&quot;page-header&quot;&gt;&#10;  &lt;h1&gt;Invoices&lt;/h1&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;invoices-index&quot;&gt;&#10;  &lt;% if @invoices.any? %&gt;&#10;    &lt;table class=&quot;pure-table pure-table-striped&quot;&gt;&#10;      &lt;thead&gt;&#10;        &lt;tr&gt;&#10;          &lt;th&gt;Invoice #&lt;/th&gt;&#10;          &lt;th&gt;Client&lt;/th&gt;&#10;          &lt;th&gt;Date&lt;/th&gt;&#10;          &lt;th&gt;Amount&lt;/th&gt;&#10;          &lt;th&gt;Status&lt;/th&gt;&#10;          &lt;th&gt;Actions&lt;/th&gt;&#10;        &lt;/tr&gt;&#10;      &lt;/thead&gt;&#10;      &lt;tbody data-controller=&quot;delete-confirmation send-confirmation&quot;&gt;&#10;        &lt;% @invoices.each do |invoice| %&gt;&#10;          &lt;tr&gt;&#10;            &lt;td&gt;&lt;%= link_to invoice.id, invoice_path(invoice) %&gt;&lt;/td&gt;&#10;            &lt;td&gt;&lt;%= invoice.client.name %&gt;&lt;/td&gt;&#10;            &lt;td&gt;&lt;%= invoice.date.strftime('%d %b %Y') if invoice.date %&gt;&lt;/td&gt;&#10;            &lt;td&gt;&lt;%= invoice.amount.format if invoice.amount %&gt;&lt;/td&gt;&#10;            &lt;td&gt;&#10;              &lt;span class=&quot;status-badge &lt;%= invoice.status %&gt;&quot;&gt;&#10;                &lt;%= invoice.status.humanize %&gt;&#10;              &lt;/span&gt;&#10;            &lt;/td&gt;&#10;            &lt;td class=&quot;actions&quot;&gt;&#10;              &lt;%= link_to &quot;View&quot;, invoice_path(invoice), class: &quot;pure-button pure-button-primary button-small&quot; %&gt;&#10;&#10;              &lt;% if invoice.created? %&gt;&#10;                &lt;%= link_to &quot;Edit&quot;, edit_invoice_path(invoice), class: &quot;pure-button button-small&quot; %&gt;&#10;                &lt;button class=&quot;pure-button button-small button-danger delete-invoice-btn&quot;&#10;                        data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;                        data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;                        data-action=&quot;click-&gt;delete-confirmation#open&quot;&gt;Delete&lt;/button&gt;&#10;              &lt;% end %&gt;&#10;&#10;              &lt;% unless invoice.paid? %&gt;&#10;                &lt;button class=&quot;pure-button pure-button-primary button-small send-invoice-btn&quot;&#10;                        data-id=&quot;&lt;%= invoice.id %&gt;&quot;&#10;                        data-name=&quot;Invoice #&lt;%= invoice.id %&gt; for &lt;%= invoice.client.name %&gt;&quot;&#10;                        data-action=&quot;click-&gt;send-confirmation#open&quot;&gt;Send&lt;/button&gt;&#10;              &lt;% end %&gt;&#10;            &lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        &lt;% end %&gt;&#10;      &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;  &lt;% else %&gt;&#10;    &lt;div class=&quot;no-invoices&quot;&gt;&#10;      &lt;p&gt;No invoices found.&lt;/p&gt;&#10;      &lt;p&gt;Create your first invoice by selecting a client and generating an invoice for their sessions.&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  &lt;% end %&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;%= render partial: 'shared/delete_confirmation_dialog', locals: { entity_type: 'invoice' } %&gt;&#10;&lt;%= render partial: 'shared/send_confirmation_dialog' %&gt;&#10;&#10;&lt;style&gt;&#10;  .page-header {&#10;    margin-bottom: 2em;&#10;    border-bottom: 2px solid #eee;&#10;    padding-bottom: 1em;&#10;  }&#10;&#10;  .invoices-index {&#10;    margin: 20px 0;&#10;  }&#10;&#10;  .pure-table {&#10;    width: 100%;&#10;    margin-bottom: 2em;&#10;  }&#10;&#10;  .pure-table th,&#10;  .pure-table td {&#10;    padding: 12px;&#10;    text-align: left;&#10;    border-bottom: 1px solid #e0e0e0;&#10;  }&#10;&#10;  .pure-table th {&#10;    background-color: #f7f7f7;&#10;    font-weight: bold;&#10;  }&#10;&#10;  .actions {&#10;    white-space: nowrap;&#10;  }&#10;&#10;  .actions .pure-button {&#10;    margin-right: 5px;&#10;  }&#10;&#10;  .button-small {&#10;    padding: 4px 8px;&#10;    font-size: 12px;&#10;  }&#10;&#10;  .button-danger {&#10;    background-color: #d9534f;&#10;    color: white;&#10;  }&#10;&#10;  .button-danger:hover {&#10;    background-color: #c9302c;&#10;  }&#10;&#10;  .status-badge {&#10;    padding: 3px 8px;&#10;    border-radius: 4px;&#10;    font-size: 12px;&#10;    font-weight: bold;&#10;    text-transform: uppercase;&#10;  }&#10;&#10;  .status-badge.created {&#10;    background-color: #f0f0f0;&#10;    color: #666;&#10;  }&#10;&#10;  .status-badge.sent {&#10;    background-color: #d9edf7;&#10;    color: #31708f;&#10;  }&#10;&#10;  .status-badge.paid {&#10;    background-color: #dff0d8;&#10;    color: #3c763d;&#10;  }&#10;&#10;  .no-invoices {&#10;    text-align: center;&#10;    padding: 40px;&#10;    color: #666;&#10;  }&#10;&#10;  .no-invoices p {&#10;    margin-bottom: 10px;&#10;  }&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/invoices/show.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/invoices/show.html.erb" />
              <option name="originalContent" value="&lt;% content_for :title, &quot;Invoice #{@invoice.id}&quot; %&gt;&#10;&#10;&lt;div class=&quot;invoice-actions&quot;&gt;&#10;  &lt;%= link_to &quot;Back to Invoices&quot;, invoices_path, class: &quot;pure-button&quot; %&gt;&#10;  &lt;%= link_to &quot;Print Invoice&quot;, &quot;#&quot;, onclick: &quot;window.print(); return false;&quot;, class: &quot;pure-button pure-button-primary&quot; %&gt;&#10;  &lt;%= link_to &quot;Send Invoice&quot;, send_invoice_invoice_path(@invoice), method: :post, class: &quot;pure-button pure-button-primary&quot;, data: { turbo_method: :post, turbo_confirm: &quot;Are you sure you want to send this invoice?&quot; } unless @invoice.paid? %&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;invoice-container&quot;&gt;&#10;  &lt;div class=&quot;invoice-content&quot;&gt;&#10;    &lt;!-- Header Section --&gt;&#10;    &lt;div class=&quot;invoice-header&quot;&gt;&#10;      &lt;div class=&quot;business-info&quot;&gt;&#10;        &lt;h2&gt;&lt;%= Rails.application.credentials.org_details[:name] %&gt;&lt;/h2&gt;&#10;        &lt;address&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:address1] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:address2] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:town] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:postcode] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:email] %&gt;&#10;        &lt;/address&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div class=&quot;invoice-title&quot;&gt;&#10;        &lt;h1&gt;INVOICE&lt;/h1&gt;&#10;        &lt;% if @invoice.paid? %&gt;&#10;          &lt;div class=&quot;invoice-status paid&quot;&gt;&#10;            PAID&#10;          &lt;/div&gt;&#10;        &lt;% end %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Invoice Details Section --&gt;&#10;    &lt;div class=&quot;invoice-details&quot;&gt;&#10;      &lt;div class=&quot;client-info&quot;&gt;&#10;        &lt;h3&gt;Bill To:&lt;/h3&gt;&#10;        &lt;% bill_to = @invoice.payee || @invoice.client %&gt;&#10;        &lt;div class=&quot;client-name&quot;&gt;&lt;%= bill_to.name %&gt;&lt;/div&gt;&#10;        &lt;address&gt;&#10;          &lt;%= bill_to.address1 %&gt;&lt;br&gt;&#10;          &lt;% if bill_to.address2.present? %&gt;&#10;            &lt;%= bill_to.address2 %&gt;&lt;br&gt;&#10;          &lt;% end %&gt;&#10;          &lt;%= bill_to.town %&gt;&lt;br&gt;&#10;          &lt;%= bill_to.postcode %&gt;&#10;        &lt;/address&gt;&#10;&#10;        &lt;% if @invoice.payee.present? %&gt;&#10;          &lt;div class=&quot;services-for&quot;&gt;&#10;            &lt;h4&gt;Services For:&lt;/h4&gt;&#10;            &lt;div&gt;&lt;%= @invoice.client.name %&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;% end %&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div class=&quot;invoice-info&quot;&gt;&#10;        &lt;table&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt;Invoice Number:&lt;/th&gt;&#10;            &lt;td class=&quot;text-right&quot;&gt;&lt;%= @invoice.id %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt; Date:&lt;/th&gt;&#10;            &lt;td class=&quot;text-right&quot;&gt;&lt;%= @invoice.date.strftime('%d %b %Y') %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Sessions Table --&gt;&#10;    &lt;div class=&quot;invoice-items&quot;&gt;&#10;      &lt;table class=&quot;pure-table pure-table-bordered&quot;&gt;&#10;        &lt;thead&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt;Date&lt;/th&gt;&#10;            &lt;th&gt;Description&lt;/th&gt;&#10;            &lt;th&gt;Duration&lt;/th&gt;&#10;            &lt;th&gt;Rate&lt;/th&gt;&#10;            &lt;th class=&quot;text-right&quot;&gt;Amount&lt;/th&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;          &lt;% @invoice.client_sessions.order(session_date: :asc).each do |session| %&gt;&#10;            &lt;tr&gt;&#10;              &lt;td&gt;&lt;%= session.session_date.strftime('%d %b %Y') %&gt;&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.description %&gt;&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.duration %&gt; minutes&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.hourly_session_rate.format %&gt;&lt;/td&gt;&#10;              &lt;td class=&quot;text-right&quot;&gt;&lt;%= session.fee.format %&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;          &lt;% end %&gt;&#10;        &lt;/tbody&gt;&#10;        &lt;tfoot&gt;&#10;          &lt;tr&gt;&#10;            &lt;td colspan=&quot;4&quot; class=&quot;total-label&quot;&gt;Total Amount:&lt;/td&gt;&#10;            &lt;td class=&quot;total-amount text-right&quot;&gt;&lt;%= @invoice.amount.format %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/tfoot&gt;&#10;      &lt;/table&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Invoice Text Section --&gt;&#10;    &lt;% if @invoice.text.present? %&gt;&#10;      &lt;div class=&quot;invoice-text&quot;&gt;&#10;        &lt;h3&gt;Additional Information&lt;/h3&gt;&#10;        &lt;div class=&quot;rich-text-content&quot;&gt;&#10;          &lt;%= @invoice.text %&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;% end %&gt;&#10;&#10;    &lt;!-- Payment Details --&gt;&#10;    &lt;div class=&quot;payment-details&quot;&gt;&#10;      &lt;h3&gt;Payment Details&lt;/h3&gt;&#10;      &lt;p&gt;&#10;        Please make payment to:&lt;br&gt;&#10;        Bank: &lt;%= Rails.application.credentials.payment_details[:bank] || &quot;Bank plc&quot; %&gt;&lt;br&gt;&#10;        Account Name: &lt;%= Rails.application.credentials.payment_details[:account_name] || &quot;Katy's Account&quot; %&gt;&lt;br&gt;&#10;        Account Number: &lt;%= Rails.application.credentials.payment_details[:account_number] || &quot;012345678&quot; %&gt;&lt;br&gt;&#10;        Sort Code: &lt;%= Rails.application.credentials.payment_details[:sort_code] || &quot;00-00-00&quot; %&gt;&lt;br&gt;&#10;        Reference: INV-&lt;%= @invoice.id %&gt;&#10;      &lt;/p&gt;&#10;      &#10;      &lt;p class=&quot;payment-terms&quot;&gt;&#10;        Payment Terms: Due within 30 days of issue.&lt;br&gt;&#10;        Please ensure all payments include the invoice reference.&#10;      &lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Thank You Note --&gt;&#10;    &lt;div class=&quot;thank-you&quot;&gt;&#10;      &lt;p&gt;Thank you for your business!&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;  /* Print styles to hide navigation and make invoice printable */&#10;  @media print {&#10;    /* Hide everything by default */&#10;    body * {&#10;      visibility: hidden !important;&#10;    }&#10;&#10;    /* Make the invoice container and all its children visible */&#10;    .invoice-container,&#10;    .invoice-container * {&#10;      visibility: visible !important;&#10;    }&#10;&#10;    /* Style the invoice container to be the main content on the printed page */&#10;    .invoice-container {&#10;      position: absolute !important;&#10;      left: 0 !important;&#10;      top: 0 !important;&#10;      width: 100% !important;&#10;      min-height: 100% !important; /* Ensure it tries to fill height */&#10;      margin: 0 !important;&#10;      padding: 20px !important; /* Apply padding for the content within the container */&#10;      border: none !important;&#10;      box-shadow: none !important; /* Remove screen shadow */&#10;      background: white !important; /* Ensure container background is white */&#10;    }&#10;&#10;    /* If .invoice-content is inside .invoice-container, its padding might need adjustment.&#10;       The screen style for .invoice-content has padding: 20px.&#10;       If .invoice-container has padding: 20px for print, and .invoice-content also has padding,&#10;       it could be too much. Let's ensure .invoice-content's own padding is reset if needed,&#10;       relying on .invoice-container's padding.&#10;    */&#10;    .invoice-content {&#10;      padding: 0 !important; /* Reset padding if .invoice-container provides it */&#10;    }&#10;&#10;    body {&#10;      background: white !important; /* Ensure body background is white */&#10;    }&#10;    &#10;    @page {&#10;      margin: 0.5cm; /* Define page margins */&#10;    }&#10;  }&#10;  &#10;  /* Regular styles */&#10;  .invoice-container {&#10;    max-width: 800px;&#10;    margin: 20px auto;&#10;    background: white;&#10;    padding: 20px;&#10;    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);&#10;  }&#10;  &#10;  .invoice-actions {&#10;    margin-top: 20px;&#10;    margin-bottom: 20px;&#10;    text-align: center;&#10;  }&#10;  &#10;  .invoice-content {&#10;    padding: 20px;&#10;  }&#10;  &#10;  .invoice-header {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    margin-bottom: 40px;&#10;    border-bottom: 2px solid #eee;&#10;    padding-bottom: 20px;&#10;  }&#10;  &#10;  .business-info {&#10;    flex: 1;&#10;  }&#10;  &#10;  .business-info h2 {&#10;    color: #333;&#10;    margin-bottom: 10px;&#10;  }&#10;  &#10;  .invoice-title {&#10;    text-align: right;&#10;  }&#10;  &#10;  .invoice-title h1 {&#10;    font-size: 32px;&#10;    color: #333;&#10;    margin-bottom: 5px;&#10;  }&#10;  &#10;  .invoice-status {&#10;    font-weight: bold;&#10;    padding: 5px 10px;&#10;    border-radius: 4px;&#10;    display: inline-block;&#10;  }&#10;  &#10;  .invoice-status.paid {&#10;    background-color: #5cb85c;&#10;    color: white;&#10;  }&#10;  &#10;  .invoice-status.unpaid {&#10;    background-color: #f0ad4e;&#10;    color: white;&#10;  }&#10;  &#10;  .invoice-details {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    margin-bottom: 30px;&#10;  }&#10;  &#10;  .client-info, .invoice-info {&#10;    flex: 1;&#10;  }&#10;  &#10;  .client-name {&#10;    font-weight: bold;&#10;    margin-bottom: 5px;&#10;  }&#10;  &#10;  .invoice-info table {&#10;    width: 100%;&#10;  }&#10;  &#10;  .invoice-info th {&#10;    text-align: left;&#10;    padding-right: 15px;&#10;    font-weight: normal;&#10;    color: #666;&#10;  }&#10;  &#10;  .invoice-items {&#10;    margin-bottom: 30px;&#10;  }&#10;  &#10;  .invoice-items table {&#10;    width: 100%;&#10;    border-collapse: collapse;&#10;  }&#10;  &#10;  .text-right {&#10;    text-align: right;&#10;  }&#10;  &#10;  .total-label {&#10;    text-align: right;&#10;    font-weight: bold;&#10;  }&#10;  &#10;  .total-amount {&#10;    font-weight: bold;&#10;    font-size: 1.1em;&#10;  }&#10;  &#10;  .payment-details {&#10;    margin-bottom: 30px;&#10;    padding: 15px;&#10;    background-color: #f9f9f9;&#10;    border-radius: 4px;&#10;  }&#10;  &#10;  .payment-terms {&#10;    margin-top: 15px;&#10;    font-style: italic;&#10;    color: #666;&#10;  }&#10;  &#10;  .thank-you {&#10;    text-align: center;&#10;    font-weight: bold;&#10;    color: #333;&#10;    padding: 20px 0;&#10;    font-size: 1.2em;&#10;  }&#10;  &#10;  address {&#10;    font-style: normal;&#10;    line-height: 1.5;&#10;    color: #555;&#10;  }&#10;  &#10;  .button-success {&#10;    background-color: #5cb85c;&#10;    color: white;&#10;  }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;% content_for :title, &quot;Invoice #{@invoice.id}&quot; %&gt;&#10;&#10;&lt;div class=&quot;invoice-actions&quot; data-controller=&quot;send-confirmation&quot;&gt;&#10;  &lt;%= link_to &quot;Back to Invoices&quot;, invoices_path, class: &quot;pure-button&quot; %&gt;&#10;  &lt;%= link_to &quot;Print Invoice&quot;, &quot;#&quot;, onclick: &quot;window.print(); return false;&quot;, class: &quot;pure-button pure-button-primary&quot; %&gt;&#10;  &lt;% unless @invoice.paid? %&gt;&#10;    &lt;button class=&quot;pure-button pure-button-primary send-invoice-btn&quot;&#10;            data-id=&quot;&lt;%= @invoice.id %&gt;&quot;&#10;            data-name=&quot;Invoice #&lt;%= @invoice.id %&gt; for &lt;%= @invoice.client.name %&gt;&quot;&#10;            data-action=&quot;click-&gt;send-confirmation#open&quot;&gt;Send Invoice&lt;/button&gt;&#10;  &lt;% end %&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;invoice-container&quot;&gt;&#10;  &lt;div class=&quot;invoice-content&quot;&gt;&#10;    &lt;!-- Header Section --&gt;&#10;    &lt;div class=&quot;invoice-header&quot;&gt;&#10;      &lt;div class=&quot;business-info&quot;&gt;&#10;        &lt;h2&gt;&lt;%= Rails.application.credentials.org_details[:name] %&gt;&lt;/h2&gt;&#10;        &lt;address&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:address1] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:address2] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:town] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:postcode] %&gt;&lt;br&gt;&#10;          &lt;%= Rails.application.credentials.org_details[:email] %&gt;&#10;        &lt;/address&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div class=&quot;invoice-title&quot;&gt;&#10;        &lt;h1&gt;INVOICE&lt;/h1&gt;&#10;        &lt;% if @invoice.paid? %&gt;&#10;          &lt;div class=&quot;invoice-status paid&quot;&gt;&#10;            PAID&#10;          &lt;/div&gt;&#10;        &lt;% end %&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Invoice Details Section --&gt;&#10;    &lt;div class=&quot;invoice-details&quot;&gt;&#10;      &lt;div class=&quot;client-info&quot;&gt;&#10;        &lt;h3&gt;Bill To:&lt;/h3&gt;&#10;        &lt;% bill_to = @invoice.payee || @invoice.client %&gt;&#10;        &lt;div class=&quot;client-name&quot;&gt;&lt;%= bill_to.name %&gt;&lt;/div&gt;&#10;        &lt;address&gt;&#10;          &lt;%= bill_to.address1 %&gt;&lt;br&gt;&#10;          &lt;% if bill_to.address2.present? %&gt;&#10;            &lt;%= bill_to.address2 %&gt;&lt;br&gt;&#10;          &lt;% end %&gt;&#10;          &lt;%= bill_to.town %&gt;&lt;br&gt;&#10;          &lt;%= bill_to.postcode %&gt;&#10;        &lt;/address&gt;&#10;&#10;        &lt;% if @invoice.payee.present? %&gt;&#10;          &lt;div class=&quot;services-for&quot;&gt;&#10;            &lt;h4&gt;Services For:&lt;/h4&gt;&#10;            &lt;div&gt;&lt;%= @invoice.client.name %&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;% end %&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div class=&quot;invoice-info&quot;&gt;&#10;        &lt;table&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt;Invoice Number:&lt;/th&gt;&#10;            &lt;td class=&quot;text-right&quot;&gt;&lt;%= @invoice.id %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt; Date:&lt;/th&gt;&#10;            &lt;td class=&quot;text-right&quot;&gt;&lt;%= @invoice.date.strftime('%d %b %Y') %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Sessions Table --&gt;&#10;    &lt;div class=&quot;invoice-items&quot;&gt;&#10;      &lt;table class=&quot;pure-table pure-table-bordered&quot;&gt;&#10;        &lt;thead&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt;Date&lt;/th&gt;&#10;            &lt;th&gt;Description&lt;/th&gt;&#10;            &lt;th&gt;Duration&lt;/th&gt;&#10;            &lt;th&gt;Rate&lt;/th&gt;&#10;            &lt;th class=&quot;text-right&quot;&gt;Amount&lt;/th&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;          &lt;% @invoice.client_sessions.order(session_date: :asc).each do |session| %&gt;&#10;            &lt;tr&gt;&#10;              &lt;td&gt;&lt;%= session.session_date.strftime('%d %b %Y') %&gt;&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.description %&gt;&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.duration %&gt; minutes&lt;/td&gt;&#10;              &lt;td&gt;&lt;%= session.hourly_session_rate.format %&gt;&lt;/td&gt;&#10;              &lt;td class=&quot;text-right&quot;&gt;&lt;%= session.fee.format %&gt;&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;          &lt;% end %&gt;&#10;        &lt;/tbody&gt;&#10;        &lt;tfoot&gt;&#10;          &lt;tr&gt;&#10;            &lt;td colspan=&quot;4&quot; class=&quot;total-label&quot;&gt;Total Amount:&lt;/td&gt;&#10;            &lt;td class=&quot;total-amount text-right&quot;&gt;&lt;%= @invoice.amount.format %&gt;&lt;/td&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/tfoot&gt;&#10;      &lt;/table&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Invoice Text Section --&gt;&#10;    &lt;% if @invoice.text.present? %&gt;&#10;      &lt;div class=&quot;invoice-text&quot;&gt;&#10;        &lt;h3&gt;Additional Information&lt;/h3&gt;&#10;        &lt;div class=&quot;rich-text-content&quot;&gt;&#10;          &lt;%= @invoice.text %&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;% end %&gt;&#10;&#10;    &lt;!-- Payment Details --&gt;&#10;    &lt;div class=&quot;payment-details&quot;&gt;&#10;      &lt;h3&gt;Payment Details&lt;/h3&gt;&#10;      &lt;p&gt;&#10;        Please make payment to:&lt;br&gt;&#10;        Bank: &lt;%= Rails.application.credentials.payment_details[:bank] || &quot;Bank plc&quot; %&gt;&lt;br&gt;&#10;        Account Name: &lt;%= Rails.application.credentials.payment_details[:account_name] || &quot;Katy's Account&quot; %&gt;&lt;br&gt;&#10;        Account Number: &lt;%= Rails.application.credentials.payment_details[:account_number] || &quot;012345678&quot; %&gt;&lt;br&gt;&#10;        Sort Code: &lt;%= Rails.application.credentials.payment_details[:sort_code] || &quot;00-00-00&quot; %&gt;&lt;br&gt;&#10;        Reference: INV-&lt;%= @invoice.id %&gt;&#10;      &lt;/p&gt;&#10;      &#10;      &lt;p class=&quot;payment-terms&quot;&gt;&#10;        Payment Terms: Due within 30 days of issue.&lt;br&gt;&#10;        Please ensure all payments include the invoice reference.&#10;      &lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- Thank You Note --&gt;&#10;    &lt;div class=&quot;thank-you&quot;&gt;&#10;      &lt;p&gt;Thank you for your business!&lt;/p&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;  /* Print styles to hide navigation and make invoice printable */&#10;  @media print {&#10;    /* Hide everything by default */&#10;    body * {&#10;      visibility: hidden !important;&#10;    }&#10;&#10;    /* Make the invoice container and all its children visible */&#10;    .invoice-container,&#10;    .invoice-container * {&#10;      visibility: visible !important;&#10;    }&#10;&#10;    /* Style the invoice container to be the main content on the printed page */&#10;    .invoice-container {&#10;      position: absolute !important;&#10;      left: 0 !important;&#10;      top: 0 !important;&#10;      width: 100% !important;&#10;      min-height: 100% !important; /* Ensure it tries to fill height */&#10;      margin: 0 !important;&#10;      padding: 20px !important; /* Apply padding for the content within the container */&#10;      border: none !important;&#10;      box-shadow: none !important; /* Remove screen shadow */&#10;      background: white !important; /* Ensure container background is white */&#10;    }&#10;&#10;    /* If .invoice-content is inside .invoice-container, its padding might need adjustment.&#10;       The screen style for .invoice-content has padding: 20px.&#10;       If .invoice-container has padding: 20px for print, and .invoice-content also has padding,&#10;       it could be too much. Let's ensure .invoice-content's own padding is reset if needed,&#10;       relying on .invoice-container's padding.&#10;    */&#10;    .invoice-content {&#10;      padding: 0 !important; /* Reset padding if .invoice-container provides it */&#10;    }&#10;&#10;    body {&#10;      background: white !important; /* Ensure body background is white */&#10;    }&#10;    &#10;    @page {&#10;      margin: 0.5cm; /* Define page margins */&#10;    }&#10;  }&#10;  &#10;  /* Regular styles */&#10;  .invoice-container {&#10;    max-width: 800px;&#10;    margin: 20px auto;&#10;    background: white;&#10;    padding: 20px;&#10;    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);&#10;  }&#10;  &#10;  .invoice-actions {&#10;    margin-top: 20px;&#10;    margin-bottom: 20px;&#10;    text-align: center;&#10;  }&#10;  &#10;  .invoice-content {&#10;    padding: 20px;&#10;  }&#10;  &#10;  .invoice-header {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    margin-bottom: 40px;&#10;    border-bottom: 2px solid #eee;&#10;    padding-bottom: 20px;&#10;  }&#10;  &#10;  .business-info {&#10;    flex: 1;&#10;  }&#10;  &#10;  .business-info h2 {&#10;    color: #333;&#10;    margin-bottom: 10px;&#10;  }&#10;  &#10;  .invoice-title {&#10;    text-align: right;&#10;  }&#10;  &#10;  .invoice-title h1 {&#10;    font-size: 32px;&#10;    color: #333;&#10;    margin-bottom: 5px;&#10;  }&#10;  &#10;  .invoice-status {&#10;    font-weight: bold;&#10;    padding: 5px 10px;&#10;    border-radius: 4px;&#10;    display: inline-block;&#10;  }&#10;  &#10;  .invoice-status.paid {&#10;    background-color: #5cb85c;&#10;    color: white;&#10;  }&#10;  &#10;  .invoice-status.unpaid {&#10;    background-color: #f0ad4e;&#10;    color: white;&#10;  }&#10;  &#10;  .invoice-details {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    margin-bottom: 30px;&#10;  }&#10;  &#10;  .client-info, .invoice-info {&#10;    flex: 1;&#10;  }&#10;  &#10;  .client-name {&#10;    font-weight: bold;&#10;    margin-bottom: 5px;&#10;  }&#10;  &#10;  .invoice-info table {&#10;    width: 100%;&#10;  }&#10;  &#10;  .invoice-info th {&#10;    text-align: left;&#10;    padding-right: 15px;&#10;    font-weight: normal;&#10;    color: #666;&#10;  }&#10;  &#10;  .invoice-items {&#10;    margin-bottom: 30px;&#10;  }&#10;  &#10;  .invoice-items table {&#10;    width: 100%;&#10;    border-collapse: collapse;&#10;  }&#10;  &#10;  .text-right {&#10;    text-align: right;&#10;  }&#10;  &#10;  .total-label {&#10;    text-align: right;&#10;    font-weight: bold;&#10;  }&#10;  &#10;  .total-amount {&#10;    font-weight: bold;&#10;    font-size: 1.1em;&#10;  }&#10;  &#10;  .payment-details {&#10;    margin-bottom: 30px;&#10;    padding: 15px;&#10;    background-color: #f9f9f9;&#10;    border-radius: 4px;&#10;  }&#10;  &#10;  .payment-terms {&#10;    margin-top: 15px;&#10;    font-style: italic;&#10;    color: #666;&#10;  }&#10;  &#10;  .thank-you {&#10;    text-align: center;&#10;    font-weight: bold;&#10;    color: #333;&#10;    padding: 20px 0;&#10;    font-size: 1.2em;&#10;  }&#10;  &#10;  address {&#10;    font-style: normal;&#10;    line-height: 1.5;&#10;    color: #555;&#10;  }&#10;  &#10;  .button-success {&#10;    background-color: #5cb85c;&#10;    color: white;&#10;  }&#10;&lt;/style&gt;&#10;&#10;&lt;%= render partial: 'shared/send_confirmation_dialog' %&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/views/shared/_send_confirmation_dialog.html.erb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/views/shared/_send_confirmation_dialog.html.erb" />
              <option name="updatedContent" value="&lt;!-- Dialog for send confirmation --&gt;&#10;&lt;dialog id=&quot;send-confirmation-dialog&quot; data-controller=&quot;send-modal&quot; data-send-modal-target=&quot;dialog&quot; data-action=&quot;click-&gt;send-modal#clickOutside&quot;&gt;&#10;  &lt;div class=&quot;dialog-content&quot;&gt;&#10;    &lt;h3&gt;Confirm Send Invoice&lt;/h3&gt;&#10;    &lt;p&gt;Are you sure you want to send the invoice: &lt;span id=&quot;invoice-to-send&quot; data-send-modal-target=&quot;name&quot;&gt;&lt;/span&gt;?&lt;/p&gt;&#10;    &lt;p&gt;This will send the invoice to the client and change its status to &quot;sent&quot;.&lt;/p&gt;&#10;    &lt;div class=&quot;dialog-buttons&quot;&gt;&#10;      &lt;button id=&quot;cancel-send&quot; class=&quot;pure-button&quot; data-action=&quot;click-&gt;send-modal#close&quot;&gt;Cancel&lt;/button&gt;&#10;      &lt;%= form_tag &quot;&quot;, method: :post, id: &quot;send-invoice-form&quot;, class: &quot;dialog-form&quot;, data: { send_modal_target: &quot;form&quot; } do %&gt;&#10;        &lt;button type=&quot;submit&quot; class=&quot;pure-button pure-button-primary&quot;&gt;Send Invoice&lt;/button&gt;&#10;      &lt;% end %&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/dialog&gt;&#10;&#10;&lt;style&gt;&#10;  /* Dialog styles */&#10;  #send-confirmation-dialog {&#10;    padding: 0;&#10;    border: none;&#10;    border-radius: 8px;&#10;    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;    max-width: 450px;&#10;    width: 100%;&#10;  }&#10;&#10;  #send-confirmation-dialog::backdrop {&#10;    background-color: rgba(0, 0, 0, 0.5);&#10;  }&#10;&#10;  .dialog-content {&#10;    padding: 20px;&#10;  }&#10;&#10;  .dialog-buttons {&#10;    display: flex;&#10;    justify-content: flex-end;&#10;    gap: 10px;&#10;    margin-top: 20px;&#10;  }&#10;&#10;  .dialog-form {&#10;    display: inline;&#10;  }&#10;&#10;  #invoice-to-send {&#10;    font-weight: bold;&#10;  }&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/spec/models/invoice_spec.rb">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/spec/models/invoice_spec.rb" />
              <option name="originalContent" value="require 'rails_helper'&#10;&#10;RSpec.describe Invoice do&#10;  include ActiveSupport::Testing::TimeHelpers&#10;&#10;  describe 'FactoryBot' do&#10;    subject(:invoice) { create(:invoice) }&#10;&#10;    specify { expect(invoice.date).to eq Date.new(2025, 2, 1) }&#10;    specify { expect(invoice.client_sessions.length).to eq 3 }&#10;  end&#10;&#10;  describe '::create' do&#10;    context 'when it is a new invoice' do&#10;      let(:invoice_params) { attributes_for(:invoice, client_id: client.id) }&#10;      let(:client) { create(:client, :with_client_sessions) }&#10;&#10;      it 'creates the invoice and associates all the client sessions' do&#10;        client_session_ids = client.client_session_ids&#10;        amount = Money.new(ClientSession.where(id: client_session_ids).sum(&amp;:fee), 'GBP')&#10;&#10;        invoice_params[:client_session_ids] = client_session_ids&#10;&#10;        invoice = Invoice.create(invoice_params)&#10;&#10;        expect(invoice.client_sessions.pluck(:id)).to match client_session_ids&#10;        expect(invoice.amount).to eq(amount)&#10;      end&#10;&#10;      it 'creates the invoice and associates some of the client sessions' do&#10;        client_session_ids = client.client_session_ids&#10;        first_client_session_id = client_session_ids.pop&#10;&#10;        invoice_params[:client_session_ids] = client_session_ids&#10;        invoice = Invoice.create(invoice_params)&#10;&#10;        expect(invoice.client_sessions.pluck(:id)).to match client_session_ids&#10;        expect(ClientSession.find(first_client_session_id).invoice_id).to be_nil&#10;      end&#10;    end&#10;  end&#10;&#10;  describe 'destruction' do&#10;    context 'when invoice status is created' do&#10;      it 'allows destruction' do&#10;        invoice = create(:invoice, status: :created)&#10;        expect(invoice.destroy).not_to be_falsey&#10;        expect(invoice.persisted?).to be_falsey&#10;      end&#10;    end&#10;&#10;    context 'when invoice status is sent' do&#10;      it 'prevents destruction' do&#10;        invoice = create(:invoice, status: :sent)&#10;        expect(invoice.destroy).to be_falsey&#10;      end&#10;&#10;      it 'does not destroy the record' do&#10;        invoice = create(:invoice, status: :sent)&#10;        invoice.destroy&#10;        expect(invoice.persisted?).to be true&#10;      end&#10;    end&#10;&#10;    context 'when invoice status is paid' do&#10;      it 'prevents destruction' do&#10;        invoice = create(:invoice, status: :paid)&#10;        expect(invoice.destroy).to be_falsey&#10;      end&#10;&#10;      it 'does not destroy the record' do&#10;        invoice = create(:invoice, status: :paid)&#10;        invoice.destroy&#10;        expect(invoice.persisted?).to be true&#10;      end&#10;    end&#10;  end&#10;&#10;  describe 'client session handling during destruction' do&#10;    context 'when invoice is destroyed' do&#10;      it 'removes invoice association from client sessions' do&#10;        client = create(:client)&#10;        invoice = create(:invoice, client: client, status: :created)&#10;        client_session = create(:client_session, client: client, invoice: invoice)&#10;&#10;        invoice.destroy&#10;        client_session.reload&#10;        expect(client_session.invoice_id).to be_nil&#10;      end&#10;    end&#10;  end&#10;&#10;  describe 'date initialization' do&#10;    let(:client) { create(:client) }&#10;&#10;    it 'sets date to current date when creating a new invoice without specifying date' do&#10;      travel_to Time.zone.local(2025, 7, 12, 10, 0, 0) do&#10;        invoice = Invoice.new(client: client)&#10;        expect(invoice.date).to eq(Date.current)&#10;      end&#10;    end&#10;&#10;    it 'does not override explicitly set date when creating new invoice' do&#10;      custom_date = Date.new(2025, 6, 15)&#10;      invoice = Invoice.new(client: client, date: custom_date)&#10;      expect(invoice.date).to eq(custom_date)&#10;    end&#10;&#10;    it 'does not set date when loading existing invoice from database' do&#10;      # Create an invoice with a specific date&#10;      invoice = create(:invoice, client: client, date: Date.new(2025, 1, 1))&#10;&#10;      # Reload from database and verify date hasn't changed&#10;      travel_to Time.zone.local(2025, 7, 12, 10, 0, 0) do&#10;        reloaded_invoice = Invoice.find(invoice.id)&#10;        expect(reloaded_invoice.date).to eq(Date.new(2025, 1, 1))&#10;        expect(reloaded_invoice.date).not_to eq(Date.current)&#10;      end&#10;    end&#10;&#10;    it 'sets date when building through association' do&#10;      travel_to Time.zone.local(2025, 7, 12, 10, 0, 0) do&#10;        invoice = client.invoices.build&#10;        expect(invoice.date).to eq(Date.current)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe 'message text population' do&#10;    let(:client) { FactoryBot.create(:client) }&#10;&#10;    it 'populates text from messages sorted by created_at date' do&#10;      travel_to Time.zone.local(2025, 7, 12, 10, 0, 0) do&#10;        # Create two messages with different creation times&#10;        older_message = FactoryBot.create(:message, text: &quot;This is the first message&quot;, created_at: 2.hours.ago)&#10;        newer_message = FactoryBot.create(:message, text: &quot;This is the second message&quot;, created_at: 1.hours.ago)&#10;&#10;        # Associate both messages with the client&#10;        older_message.apply_to_client(client)&#10;        newer_message.apply_to_client(client)&#10;&#10;        # Create new invoice which should populate text from messages&#10;        invoice = Invoice.new(client: client)&#10;&#10;        # Expected text should have messages in chronological order (oldest first)&#10;        expected_text = &quot;This is the first message\n\nThis is the second message&quot;&#10;        expect(invoice.text.to_plain_text.strip).to eq(expected_text)&#10;      end&#10;    end&#10;  end&#10;end&#10;" />
              <option name="updatedContent" value="require 'rails_helper'&#10;&#10;RSpec.describe Invoice do&#10;  include ActiveSupport::Testing::TimeHelpers&#10;&#10;  describe 'FactoryBot' do&#10;    subject(:invoice) { create(:invoice) }&#10;&#10;    specify { expect(invoice.date).to eq Date.new(2025, 2, 1) }&#10;    specify { expect(invoice.client_sessions.length).to eq 3 }&#10;  end&#10;&#10;  describe '::create' do&#10;    context 'when it is a new invoice' do&#10;      let(:invoice_params) { attributes_for(:invoice, client_id: client.id) }&#10;      let(:client) { create(:client, :with_client_sessions) }&#10;&#10;      it 'creates the invoice and associates all the client sessions' do&#10;        client_session_ids = client.client_session_ids&#10;        amount = Money.new(ClientSession.where(id: client_session_ids).sum(&amp;:fee), 'GBP')&#10;&#10;        invoice_params[:client_session_ids] = client_session_ids&#10;&#10;        invoice = Invoice.create(invoice_params)&#10;&#10;        expect(invoice.client_sessions.pluck(:id)).to match client_session_ids&#10;        expect(invoice.amount).to eq(amount)&#10;      end&#10;&#10;      it 'creates the invoice and associates some of the client sessions' do&#10;        client_session_ids = client.client_session_ids&#10;        first_client_session_id = client_session_ids.pop&#10;&#10;        invoice_params[:client_session_ids] = client_session_ids&#10;        invoice = Invoice.create(invoice_params)&#10;&#10;        expect(invoice.client_sessions.pluck(:id)).to match client_session_ids&#10;        expect(ClientSession.find(first_client_session_id).invoice_id).to be_nil&#10;      end&#10;    end&#10;  end&#10;&#10;  describe 'destruction' do&#10;    context 'when invoice status is created' do&#10;      it 'allows destruction' do&#10;        invoice = create(:invoice, status: :created)&#10;        expect(invoice.destroy).not_to be_falsey&#10;        expect(invoice.persisted?).to be_falsey&#10;      end&#10;    end&#10;&#10;    context 'when invoice status is sent' do&#10;      it 'prevents destruction' do&#10;        invoice = create(:invoice, status: :sent)&#10;        expect(invoice.destroy).to be_falsey&#10;      end&#10;&#10;      it 'does not destroy the record' do&#10;        invoice = create(:invoice, status: :sent)&#10;        invoice.destroy&#10;        expect(invoice.persisted?).to be true&#10;      end&#10;    end&#10;&#10;    context 'when invoice status is paid' do&#10;      it 'prevents destruction' do&#10;        invoice = create(:invoice, status: :paid)&#10;        expect(invoice.destroy).to be_falsey&#10;      end&#10;&#10;      it 'does not destroy the record' do&#10;        invoice = create(:invoice, status: :paid)&#10;        invoice.destroy&#10;        expect(invoice.persisted?).to be true&#10;      end&#10;    end&#10;  end&#10;&#10;  describe 'client session handling during destruction' do&#10;    context 'when invoice is destroyed' do&#10;      it 'removes invoice association from client sessions' do&#10;        client = create(:client)&#10;        invoice = create(:invoice, client: client, status: :created)&#10;        client_session = create(:client_session, client: client, invoice: invoice)&#10;&#10;        invoice.destroy&#10;        client_session.reload&#10;        expect(client_session.invoice_id).to be_nil&#10;      end&#10;&#10;      it 'removes invoice association from multiple client sessions' do&#10;        client = create(:client)&#10;        invoice = create(:invoice, client: client, status: :created)&#10;&#10;        # Create multiple client sessions associated with the invoice&#10;        session1 = create(:client_session, client: client, invoice: invoice)&#10;        session2 = create(:client_session, client: client, invoice: invoice)&#10;        session3 = create(:client_session, client: client, invoice: invoice)&#10;&#10;        # Verify sessions are associated with the invoice&#10;        expect(session1.reload.invoice_id).to eq(invoice.id)&#10;        expect(session2.reload.invoice_id).to eq(invoice.id)&#10;        expect(session3.reload.invoice_id).to eq(invoice.id)&#10;&#10;        # Destroy the invoice&#10;        invoice.destroy&#10;&#10;        # Verify all sessions have their invoice_id reset to nil&#10;        expect(session1.reload.invoice_id).to be_nil&#10;        expect(session2.reload.invoice_id).to be_nil&#10;        expect(session3.reload.invoice_id).to be_nil&#10;      end&#10;    end&#10;  end&#10;&#10;  describe 'date initialization' do&#10;    let(:client) { create(:client) }&#10;&#10;    it 'sets date to current date when creating a new invoice without specifying date' do&#10;      travel_to Time.zone.local(2025, 7, 12, 10, 0, 0) do&#10;        invoice = Invoice.new(client: client)&#10;        expect(invoice.date).to eq(Date.current)&#10;      end&#10;    end&#10;&#10;    it 'does not override explicitly set date when creating new invoice' do&#10;      custom_date = Date.new(2025, 6, 15)&#10;      invoice = Invoice.new(client: client, date: custom_date)&#10;      expect(invoice.date).to eq(custom_date)&#10;    end&#10;&#10;    it 'does not set date when loading existing invoice from database' do&#10;      # Create an invoice with a specific date&#10;      invoice = create(:invoice, client: client, date: Date.new(2025, 1, 1))&#10;&#10;      # Reload from database and verify date hasn't changed&#10;      travel_to Time.zone.local(2025, 7, 12, 10, 0, 0) do&#10;        reloaded_invoice = Invoice.find(invoice.id)&#10;        expect(reloaded_invoice.date).to eq(Date.new(2025, 1, 1))&#10;        expect(reloaded_invoice.date).not_to eq(Date.current)&#10;      end&#10;    end&#10;&#10;    it 'sets date when building through association' do&#10;      travel_to Time.zone.local(2025, 7, 12, 10, 0, 0) do&#10;        invoice = client.invoices.build&#10;        expect(invoice.date).to eq(Date.current)&#10;      end&#10;    end&#10;  end&#10;&#10;  describe 'message text population' do&#10;    let(:client) { FactoryBot.create(:client) }&#10;&#10;    it 'populates text from messages sorted by created_at date' do&#10;      travel_to Time.zone.local(2025, 7, 12, 10, 0, 0) do&#10;        # Create two messages with different creation times&#10;        older_message = FactoryBot.create(:message, text: &quot;This is the first message&quot;, created_at: 2.hours.ago)&#10;        newer_message = FactoryBot.create(:message, text: &quot;This is the second message&quot;, created_at: 1.hours.ago)&#10;&#10;        # Associate both messages with the client&#10;        older_message.apply_to_client(client)&#10;        newer_message.apply_to_client(client)&#10;&#10;        # Create new invoice which should populate text from messages&#10;        invoice = Invoice.new(client: client)&#10;&#10;        # Expected text should have messages in chronological order (oldest first)&#10;        expected_text = &quot;This is the first message\n\nThis is the second message&quot;&#10;        expect(invoice.text.to_plain_text.strip).to eq(expected_text)&#10;      end&#10;    end&#10;  end&#10;end&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>